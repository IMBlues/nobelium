{"pageProps":{"xmlFeed":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<feed xmlns=\"http://www.w3.org/2005/Atom\">\n    <id>https://emergencyexit.xyz//</id>\n    <title>布鲁斯鱼的妙想天开</title>\n    <updated>2022-10-17T13:06:14.219Z</updated>\n    <generator>https://github.com/jpmonette/feed</generator>\n    <author>\n        <name>amazing-blues</name>\n        <email>bluesedenyu@gmail.com</email>\n        <uri>https://emergencyexit.xyz/</uri>\n    </author>\n    <link rel=\"alternate\" href=\"https://emergencyexit.xyz//\"/>\n    <subtitle>此间的博文大抵有两类，一种是水的，另一种仍是水的罢。 —— 鲁迅</subtitle>\n    <icon>https://emergencyexit.xyz//favicon.svg</icon>\n    <rights>All rights reserved 2022, amazing-blues</rights>\n    <entry>\n        <title type=\"html\"><![CDATA[WTF Go: Constants]]></title>\n        <id>https://emergencyexit.xyz//qffqfq</id>\n        <link href=\"https://emergencyexit.xyz//qffqfq\"/>\n        <updated>2022-10-11T00:00:00.000Z</updated>\n        <summary type=\"html\"><![CDATA[eeeee]]></summary>\n        <content type=\"html\"><![CDATA[<main class=\"notion light-mode notion-page notion-block-7545e035a53c4c9c97cee21bfc1b45e3\"><div class=\"notion-viewport\"></div><pre class=\"notion-code language-go\"><code class=\"language-go\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span>\n\t<span class=\"token string\">\"time\"</span>\n\t<span class=\"token string\">\"math/rand\"</span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// invalid operation: rand.Intn(10) * 1000 * time.Millisecond (mismatched types int and time.Duration)</span>\ntime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span> ❌\n\n<span class=\"token comment\">// 🤔 make sense.</span>\ntime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span>time<span class=\"token punctuation\">.</span><span class=\"token function\">Duration</span><span class=\"token punctuation\">(</span>rand<span class=\"token punctuation\">.</span><span class=\"token function\">Intn</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span> ✅\n\n<span class=\"token comment\">// wtf ?!</span>\ntime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span> ✅ \n</code></pre><div class=\"notion-text notion-block-aeddbd06e2fc4552b84e372fcc5bde9b\">看看上面这个简单的例子：</div><ul class=\"notion-list notion-list-disc notion-block-0022383a48734276b49c57d4b62fdeaa\"><li>第一个错误很容易理解： 整型不能和 <code class=\"notion-inline-code\">time.Duration</code> 相乘</li></ul><ul class=\"notion-list notion-list-disc notion-block-3aefed93bfe6445d9097822c56293d44\"><li>第二个例子修正了这一问题，符合预期</li></ul><ul class=\"notion-list notion-list-disc notion-block-6f15ca3587d54d10a5a4f259a01fcf58\"><li>第三个例子带来了疑问，为什么 <code class=\"notion-inline-code\">1000 * time.Millisecond</code> 却没有问题？明明 <code class=\"notion-inline-code\">1000</code> 也是个整型？编译器戴了有色眼镜？</li></ul><div class=\"notion-text notion-block-3fe776d69ce041f1b3e64c181051b657\">别慌，仔细看看 <code class=\"notion-inline-code\">rand.Intn(10) * 1000</code> 和 <code class=\"notion-inline-code\">1000</code> 的区别在于：前者是变量，类型已经确定了，通不过编译是情理之中；而后者是常量，类型并不是 <code class=\"notion-inline-code\">int</code> ，属于 <code class=\"notion-inline-code\">untyped constants</code> ，编译器会尝试将它转换成 <code class=\"notion-inline-code\">time.Duration</code> 。</div><div class=\"notion-text notion-block-0e72d18a238e46329e5845a8599ceb30\">这就勾起了我的好奇心，那如果我写个一个 <code class=\"notion-inline-code\">float</code> 常量会怎样呢？</div><pre class=\"notion-code language-go\"><code class=\"language-go\">\n<span class=\"token comment\">// (untyped float constant) truncated to int64</span>\ntime<span class=\"token punctuation\">.</span><span class=\"token function\">Sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000.1</span> <span class=\"token operator\">*</span> time<span class=\"token punctuation\">.</span>Millisecond<span class=\"token punctuation\">)</span> ❌</code></pre><div class=\"notion-text notion-block-9bceb4f93af04ff3808708f9f0673a59\">果然是不行的。那么究竟这个无类型常量的类型转换是依照什么规则进行的呢？</div><div class=\"notion-text notion-block-cd1dc4daa31a431083bb670ef06adf8b\">首先每一种常量的<b>写法</b>都会对应着一种默认类型：</div><figure class=\"notion-asset-wrapper notion-asset-wrapper-image notion-block-2fdbb3a5741244af8b2f83856461e36c\"><div style=\"position:relative;display:flex;justify-content:center;align-self:center;width:540px;max-width:100%;flex-direction:column\"><img style=\"object-fit:cover\" src=\"https://www.notion.so/image/https%3A%2F%2Fs3.us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F4841bfb7-5a0d-42ae-ba4c-55881d39feec%2FUntitled.png%3FX-Amz-Algorithm%3DAWS4-HMAC-SHA256%26X-Amz-Content-Sha256%3DUNSIGNED-PAYLOAD%26X-Amz-Credential%3DAKIAT73L2G45EIPT3X45%252F20221017%252Fus-west-2%252Fs3%252Faws4_request%26X-Amz-Date%3D20221017T130613Z%26X-Amz-Expires%3D86400%26X-Amz-Signature%3D81e52f7cfab4fa301c5c9911ee856d67c647a31472cc3fe646f85eb0106e875c%26X-Amz-SignedHeaders%3Dhost%26x-id%3DGetObject?table=block&amp;id=2fdbb3a5-7412-44af-8b2f-83856461e36c&amp;cache=v2\" alt=\"notion image\" loading=\"lazy\" decoding=\"async\"/></div></figure><div class=\"notion-blank notion-block-8a966ee950464948b2087f66db1b3f62\"> </div><div class=\"notion-text notion-block-5d52420866574289af6a0e1fd2054dd5\">然后，看看 <code class=\"notion-inline-code\">time.Duration</code> 的定义：</div><pre class=\"notion-code language-go\"><code class=\"language-go\">type Duration int64\n\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span>\n    Nanosecond  Duration <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    Microsecond          <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> Nanosecond\n    Millisecond          <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> Microsecond\n    Second               <span class=\"token operator\">=</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> Millisecond\n    Minute               <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> Second\n    Hour                 <span class=\"token operator\">=</span> <span class=\"token number\">60</span> <span class=\"token operator\">*</span> Minute\n<span class=\"token punctuation\">)</span></code></pre><div class=\"notion-text notion-block-f927db596dd8470481b6d98a3de2ca57\">也就是说 <code class=\"notion-inline-code\">1000</code> 的写法默认类型为 <code class=\"notion-inline-code\">int</code> ，编译器会尝试做一次类型转换 <code class=\"notion-inline-code\">int</code> → <code class=\"notion-inline-code\">time.Duration</code> ，而 <code class=\"notion-inline-code\">int64</code> 和 <code class=\"notion-inline-code\">int</code> 又能做到完全兼容，所以编译通过。</div><div class=\"notion-blank notion-block-e2e94e0784cb4348bbec69b2bdc09138\"> </div><div class=\"notion-text notion-block-3e6464aaa02340628ea464abeb427f08\">WTF，Go…</div><h3 class=\"notion-h notion-h2 notion-h-indent-0 notion-block-4bb96aba79554c59a66add95e6674c10\" data-id=\"4bb96aba79554c59a66add95e6674c10\"><span><div id=\"4bb96aba79554c59a66add95e6674c10\" class=\"notion-header-anchor\"></div><a class=\"notion-hash-link\" href=\"#4bb96aba79554c59a66add95e6674c10\" title=\"参考：\"><svg viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a><span class=\"notion-h-title\">参考：</span></span></h3><ul class=\"notion-list notion-list-disc notion-block-1fbc6a2020f441909fcf391c04892766\"><li><a target=\"_blank\" rel=\"noopener noreferrer\" class=\"notion-link\" href=\"https://go.dev/blog/constants\">https://go.dev/blog/constants</a> （本文主要搬运来源）</li></ul><ul class=\"notion-list notion-list-disc notion-block-d4ec28d9527d4135a64d0baaf5c2ec6b\"><li><a target=\"_blank\" rel=\"noopener noreferrer\" class=\"notion-link\" href=\"https://blog.learngoprogramming.com/learn-golang-typed-untyped-constants-70b4df443b61\">https://blog.learngoprogramming.com/learn-golang-typed-untyped-constants-70b4df443b61</a></li></ul><div class=\"notion-blank notion-block-4066b90cd3a2489183e2b264d1d11ab8\"> </div></main>]]></content>\n    </entry>\n    <entry>\n        <title type=\"html\"><![CDATA[让 DRF Views 支持依赖注入]]></title>\n        <id>https://emergencyexit.xyz//asdfasdfasdf</id>\n        <link href=\"https://emergencyexit.xyz//asdfasdfasdf\"/>\n        <updated>2021-05-24T00:00:00.000Z</updated>\n        <summary type=\"html\"><![CDATA[asdfasdfasd]]></summary>\n        <content type=\"html\"><![CDATA[<main class=\"notion light-mode notion-page notion-block-680e8aba94e74721952d011a44a20ebe\"><div class=\"notion-viewport\"></div><h3 class=\"notion-h notion-h2 notion-h-indent-0 notion-block-32d25641e8064c55bfcf9814a31d11fd\" data-id=\"32d25641e8064c55bfcf9814a31d11fd\"><span><div id=\"32d25641e8064c55bfcf9814a31d11fd\" class=\"notion-header-anchor\"></div><a class=\"notion-hash-link\" href=\"#32d25641e8064c55bfcf9814a31d11fd\" title=\"起因\"><svg viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a><span class=\"notion-h-title\">起因</span></span></h3><div class=\"notion-text notion-block-91535e58c80c4af0af7afd3bf9256bbb\">Django 和 <a target=\"_blank\" rel=\"noopener noreferrer\" class=\"notion-link\" href=\"https://www.django-rest-framework.org/\">Django REST framework</a> 是 Python 开发者常用的框架组合，通常来说，一个典型的 DRF 式 API 可能长这个样子：</div><pre class=\"notion-code language-python\"><code class=\"language-python\">from rest_framework<span class=\"token punctuation\">.</span>generics <span class=\"token keyword\">import</span> ListAPIView\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfileViewSet</span><span class=\"token punctuation\">(</span>ListAPIView<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    def <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        serializer <span class=\"token operator\">=</span> <span class=\"token function\">LoginSerializer</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n        serializer<span class=\"token punctuation\">.</span><span class=\"token function\">is_valid</span><span class=\"token punctuation\">(</span>raise_exception<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span>\n        validated_data <span class=\"token operator\">=</span> serializer<span class=\"token punctuation\">.</span>validated_data\n\n        <span class=\"token operator\">...</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Response</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span><span class=\"token function\">ProfileSerializer</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> many<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></code></pre><div class=\"notion-blank notion-block-487e55663484486bae984465b860d412\"> </div><div class=\"notion-text notion-block-89f7b3196141406fbd0883fe515d95fd\">这样写在逻辑上是简单的，可以让开发者对用户请求处理有一个清晰的脉络，但同时也会带来问题：<code class=\"notion-inline-code\">Serializer</code> 的逻辑和主逻辑混杂，使单元测试构造困难。</div><div class=\"notion-text notion-block-13bf0cd7f4c74446b5dfc729ea5396f3\">同时，输入输出的代码在多个 API 中是有一定程度重复的， <code class=\"notion-inline-code\">D.R.Y</code> 重度患者无法接受。</div><div class=\"notion-blank notion-block-650523c412c54263b4d3fadc411836ac\"> </div><h3 class=\"notion-h notion-h2 notion-h-indent-0 notion-block-470f666078b843248e033a9f28c499b2\" data-id=\"470f666078b843248e033a9f28c499b2\"><span><div id=\"470f666078b843248e033a9f28c499b2\" class=\"notion-header-anchor\"></div><a class=\"notion-hash-link\" href=\"#470f666078b843248e033a9f28c499b2\" title=\"启发\"><svg viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a><span class=\"notion-h-title\">启发</span></span></h3><div class=\"notion-text notion-block-a2a1247b2eb0482da59d9fbdd337a427\">新贵框架 <a target=\"_blank\" rel=\"noopener noreferrer\" class=\"notion-link\" href=\"https://fastapi.tiangolo.com/\">FastAPI</a> 的 <a target=\"_blank\" rel=\"noopener noreferrer\" class=\"notion-link\" href=\"https://fastapi.tiangolo.com/tutorial/dependencies/#what-is-dependency-injection\">依赖注入特性</a> 就能够很好的解决以上两点：</div><pre class=\"notion-code language-python\"><code class=\"language-python\">from fastapi <span class=\"token keyword\">import</span> Depends<span class=\"token punctuation\">,</span> FastAPI\n\napp <span class=\"token operator\">=</span> <span class=\"token function\">FastAPI</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n@app<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/items/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">async</span> def <span class=\"token function\">read_items</span><span class=\"token punctuation\">(</span>commons<span class=\"token operator\">:</span> dict <span class=\"token operator\">=</span> <span class=\"token function\">Depends</span><span class=\"token punctuation\">(</span>common_parameters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">return</span> commons</code></pre><div class=\"notion-blank notion-block-d6fed93f685d4f82963110dbf945a4bf\"> </div><div class=\"notion-text notion-block-b300113037244b91b2af29fcf03a75eb\">然而，现实中的工程中切换框架往往是成本高昂的，仅仅为了依赖注入而切换框架显得有些小题大做。所以，如果能在 Django &amp; DRF 中实现类似依赖注入的功能，会较大程度提高 <code class=\"notion-inline-code\">views</code> 的可读性并降低 <a target=\"_blank\" rel=\"noopener noreferrer\" class=\"notion-link\" href=\"https://en.wikipedia.org/wiki/Test-driven_development\">TDD </a>的门槛，间接提高代码质量。</div><div class=\"notion-blank notion-block-5417c9caad4d4972b620a9f3cb7f4970\"> </div><div class=\"notion-text notion-block-9854566dd31942bbb20f6f9809b2457f\">同时我们需要满足几个条件：</div><ul class=\"notion-list notion-list-disc notion-block-06d2468f5457474b8f008732314be6b4\"><li>能够兼容当前的 ViewSet 类</li></ul><ul class=\"notion-list notion-list-disc notion-block-018715b306484c6dbc85432e58b83052\"><li>能够复用 Serializer</li></ul><ul class=\"notion-list notion-list-disc notion-block-df76653a130e41f2a545222fb87fa0ea\"><li>（可选）能够复用 <code class=\"notion-inline-code\">drf-yasg</code></li></ul><div class=\"notion-blank notion-block-1635ff6ebfa040028a029b561366bf6a\"> </div><div class=\"notion-text notion-block-4c336f4e870e4f92a6de773b562b3819\">综上，我写了一个 <a target=\"_blank\" rel=\"noopener noreferrer\" class=\"notion-link\" href=\"https://gist.github.com/IMBlues/e36e792159729f429f9abf656ba24d10\">简单的文件</a> ，你可以将它 Copy 到你的 DRF 项目中就可以改造原来的 <code class=\"notion-inline-code\">ViewSet</code> </div><div class=\"notion-text notion-block-dfb6d917666e4461a530db83fda0262d\">（当前需求是比较简单的，封装成 SDK 然后安装依赖的成本反而高于直接复制粘贴，<s>这样大家可以一起偷懒</s>）</div><div class=\"notion-blank notion-block-b167cfdccb6c47efb572430771521082\"> </div><h3 class=\"notion-h notion-h2 notion-h-indent-0 notion-block-771671b34a31433f911562dee8577d84\" data-id=\"771671b34a31433f911562dee8577d84\"><span><div id=\"771671b34a31433f911562dee8577d84\" class=\"notion-header-anchor\"></div><a class=\"notion-hash-link\" href=\"#771671b34a31433f911562dee8577d84\" title=\"最后的效果：\"><svg viewBox=\"0 0 16 16\" width=\"16\" height=\"16\"><path fill-rule=\"evenodd\" d=\"M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z\"></path></svg></a><span class=\"notion-h-title\">最后的效果：</span></span></h3><div class=\"notion-blank notion-block-17af11c97cbc4b1d93f5b89fa7d1282b\"> </div><div class=\"notion-text notion-block-7fe4258f3236411f824763bc34aca3a9\">原来的 <code class=\"notion-inline-code\">ViewSet</code> （包含 <code class=\"notion-inline-code\">drf-yasg</code> 的 schema 生成）</div><pre class=\"notion-code language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfileViewSet</span><span class=\"token punctuation\">(</span>ListAPIView<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    @<span class=\"token function\">swagger_auto_schema</span><span class=\"token punctuation\">(</span>\n        request_body<span class=\"token operator\">=</span>LoginSerializer<span class=\"token punctuation\">,</span>\n        responses<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>status<span class=\"token punctuation\">.</span><span class=\"token constant\">HTTP_200_OK</span><span class=\"token operator\">:</span> <span class=\"token function\">ProfileSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    def <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        serializer <span class=\"token operator\">=</span> <span class=\"token function\">LoginSerializer</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span>request<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n        serializer<span class=\"token punctuation\">.</span><span class=\"token function\">is_valid</span><span class=\"token punctuation\">(</span>raise_exception<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span>\n        validated_data <span class=\"token operator\">=</span> serializer<span class=\"token punctuation\">.</span>validated_data\n\n        <span class=\"token operator\">...</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">Response</span><span class=\"token punctuation\">(</span>data<span class=\"token operator\">=</span><span class=\"token function\">ProfileSerializer</span><span class=\"token punctuation\">(</span>results<span class=\"token punctuation\">,</span> many<span class=\"token operator\">=</span>True<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></code></pre><div class=\"notion-blank notion-block-d547ba772b374495a23c34f531714dc2\"> </div><div class=\"notion-text notion-block-60d9ef93f6764e24bedaa76a6d5b16f0\">改造之后的效果：</div><pre class=\"notion-code language-python\"><code class=\"language-python\">from some_path<span class=\"token punctuation\">.</span>inject <span class=\"token keyword\">import</span> serializer_inject\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProfileViewSet</span><span class=\"token punctuation\">(</span>ListAPIView<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n    @<span class=\"token function\">serializer_inject</span><span class=\"token punctuation\">(</span>\n        in_cls<span class=\"token operator\">=</span>LoginSerializer<span class=\"token punctuation\">,</span>\n        out_cls<span class=\"token operator\">=</span>ProfileSerializer<span class=\"token punctuation\">,</span>\n        # 选择去掉原有的 request 依赖\n        config<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"remain_request\"</span><span class=\"token operator\">:</span> False<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        out_params<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token string-property property\">\"many\"</span><span class=\"token operator\">:</span> True<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span>\n    def <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">validated_data</span><span class=\"token operator\">:</span> dict<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>\n        # 原来的逻辑部分\n        <span class=\"token operator\">...</span>\n        <span class=\"token keyword\">return</span> results</code></pre><div class=\"notion-text notion-block-75e90e26df1e496fae329bc50189185a\">（可以通过 <a target=\"_blank\" rel=\"noopener noreferrer\" class=\"notion-link\" href=\"https://gist.github.com/IMBlues/e36e792159729f429f9abf656ba24d10#gistcomment-3754830\">gist 评论</a> 获取更多的例子）</div><div class=\"notion-blank notion-block-178df46b51be40f39833f7e739f6fa69\"> </div><div class=\"notion-text notion-block-759f22f4cc5b4ec99bc33aaf3f7a1e6a\">这样的改造我们得到了一些好处：</div><ul class=\"notion-list notion-list-disc notion-block-00853b638ffa4752a1f3c6ff23bae24d\"><li>仅需要简单改造原来的 <code class=\"notion-inline-code\">ViewSet</code> </li></ul><ul class=\"notion-list notion-list-disc notion-block-b2f732fd222743e18b2124bdf07c7ca6\"><li>完全继承原来的 <code class=\"notion-inline-code\">Serializer</code> </li></ul><ul class=\"notion-list notion-list-disc notion-block-b1b80a8daad7457a89e597ef8a162d24\"><li>完整支持 <code class=\"notion-inline-code\">drf-yasg</code> </li></ul><ul class=\"notion-list notion-list-disc notion-block-b0ba56669bfd404188022485e144a991\"><li>在原来主干逻辑没有依赖 <code class=\"notion-inline-code\">request</code> 对象的情况下，单元测试的用例构造被简化成了 <code class=\"notion-inline-code\">dict</code> </li></ul><div class=\"notion-blank notion-block-c1b95c8cb2b34115939e834f030e59c8\"> </div><div class=\"notion-text notion-block-3bd340124d074872b83a16c9231d6132\">当然仍旧还有不完美的地方：</div><ul class=\"notion-list notion-list-disc notion-block-da6776d758d24314bafcbd32db93339b\"><li>没有使用 <code class=\"notion-inline-code\">Type Annotation</code> ，在声明上较 <code class=\"notion-inline-code\">FastAPI</code> 更为冗余</li></ul><ul class=\"notion-list notion-list-disc notion-block-5d20efd05c664ced8175b0b0ac5ae291\"><li>对于返回值使用了 <code class=\"notion-inline-code\">context</code> 的 <code class=\"notion-inline-code\">Serializer</code> 需要通过 <code class=\"notion-inline-code\">inject.ResponseParams</code> 类来包装一次，显得不那么纯粹，暂时也没有更好的思路，<s>有空再慢慢改（咕咕🐦）。</s></li></ul><div class=\"notion-blank notion-block-01e6b58440774af28ddef8d0de6a2ca9\"> </div></main>]]></content>\n    </entry>\n</feed>"},"__N_SSG":true}