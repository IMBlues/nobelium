<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://next.emergencyexit.xyz//</id>
    <title>布鲁斯鱼的妙想天开</title>
    <updated>2022-10-18T13:55:42.524Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>bluesyu</name>
        <email>bluesedenyu@gmail.com</email>
        <uri>https://next.emergencyexit.xyz/</uri>
    </author>
    <link rel="alternate" href="https://next.emergencyexit.xyz//"/>
    <subtitle>此间的博文大抵有两类，一种是水的，另一种仍是水的罢。 —— 鲁迅</subtitle>
    <icon>https://next.emergencyexit.xyz//favicon.svg</icon>
    <rights>All rights reserved 2022, bluesyu</rights>
    <entry>
        <title type="html"><![CDATA[WTF Go: Constants]]></title>
        <id>https://next.emergencyexit.xyz//wtf-go-constants</id>
        <link href="https://next.emergencyexit.xyz//wtf-go-constants"/>
        <updated>2022-10-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[ WTF Go: 初看反直觉，仔细研究却大有设计]]></summary>
        <content type="html"><![CDATA[<main class="notion light-mode notion-page notion-block-f6ba5dfd50004e1580b47d3456bc676a"><div class="notion-viewport"></div><pre class="notion-code language-go"><code class="language-go"><span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"time"</span>
	<span class="token string">"math/rand"</span>
<span class="token punctuation">)</span>

<span class="token comment">// invalid operation: rand.Intn(10) * 1000 * time.Millisecond (mismatched types int and time.Duration)</span>
time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span> ❌

<span class="token comment">// 🤔 make sense.</span>
time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">Duration</span><span class="token punctuation">(</span>rand<span class="token punctuation">.</span><span class="token function">Intn</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span> ✅

<span class="token comment">// wtf ?!</span>
time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span> ✅ 
</code></pre><div class="notion-text notion-block-c39aa2c506de4a38884207f6cc0666f4">看看上面这个简单的例子：</div><ul class="notion-list notion-list-disc notion-block-94339645b11c4208ac1de17ef66e21d6"><li>第一个错误很容易理解： 整型不能和 <code class="notion-inline-code">time.Duration</code> 相乘</li></ul><ul class="notion-list notion-list-disc notion-block-90a7e274dd4740ac97bd29e4c8b56822"><li>第二个例子修正了这一问题，符合预期</li></ul><ul class="notion-list notion-list-disc notion-block-f1ecf287e16c4698bfa18a71b4789179"><li>第三个例子带来了疑问，为什么 <code class="notion-inline-code">1000 * time.Millisecond</code> 却没有问题？明明 <code class="notion-inline-code">1000</code> 也是个整型？编译器戴了有色眼镜？</li></ul><div class="notion-text notion-block-2aa15d50137b414bb6ed5569ce63f326">别慌，仔细看看 <code class="notion-inline-code">rand.Intn(10) * 1000</code> 和 <code class="notion-inline-code">1000</code> 的区别在于：前者是变量，类型已经确定了，通不过编译是情理之中；而后者是常量，类型并不是 <code class="notion-inline-code">int</code> ，属于 <code class="notion-inline-code">untyped constants</code> ，编译器会尝试将它转换成 <code class="notion-inline-code">time.Duration</code> 。</div><div class="notion-text notion-block-4b6e7022ba1c41dc9dec86be35016e6a">这就勾起了我的好奇心，那如果我写个一个 <code class="notion-inline-code">float</code> 常量会怎样呢？</div><pre class="notion-code language-go"><code class="language-go"><span class="token comment">// (untyped float constant) truncated to int64</span>
time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">1000.1</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span> ❌</code></pre><div class="notion-text notion-block-5581a723f1c9437da180b271dde64dfb">果然是不行的。那么究竟这个无类型常量的类型转换是依照什么规则进行的呢？</div><div class="notion-text notion-block-fda4059895d742c18a5c11fcd2834e98">首先每一种常量的<b>写法</b>都会对应着一种默认类型：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-bead2efbe82d41e6a20ac11ad6d2aa44"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:540px;max-width:100%;flex-direction:column"><img style="object-fit:contain" src="https://www.notion.so/image/https%3A%2F%2Fs3.us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F4841bfb7-5a0d-42ae-ba4c-55881d39feec%2FUntitled.png%3FX-Amz-Algorithm%3DAWS4-HMAC-SHA256%26X-Amz-Content-Sha256%3DUNSIGNED-PAYLOAD%26X-Amz-Credential%3DAKIAT73L2G45EIPT3X45%252F20221018%252Fus-west-2%252Fs3%252Faws4_request%26X-Amz-Date%3D20221018T135535Z%26X-Amz-Expires%3D86400%26X-Amz-Signature%3D07d45f3160b87e0d4437767c5640f80ede969aff4f861acbc7aba0a52c842e52%26X-Amz-SignedHeaders%3Dhost%26x-id%3DGetObject?table=block&amp;id=bead2efb-e82d-41e6-a20a-c11ad6d2aa44&amp;cache=v2" loading="lazy" alt="notion image" decoding="async"/></div></figure><div class="notion-blank notion-block-fd185c5379f34f0a8f0cafca86305977"> </div><div class="notion-text notion-block-b39975e4a04d40b4b8693d417031d653">然后，看看 <code class="notion-inline-code">time.Duration</code> 的定义：</div><pre class="notion-code language-go"><code class="language-go">type Duration int64

<span class="token keyword">const</span> <span class="token punctuation">(</span>
    Nanosecond  Duration <span class="token operator">=</span> <span class="token number">1</span>
    Microsecond          <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> Nanosecond
    Millisecond          <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> Microsecond
    Second               <span class="token operator">=</span> <span class="token number">1000</span> <span class="token operator">*</span> Millisecond
    Minute               <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> Second
    Hour                 <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> Minute
<span class="token punctuation">)</span></code></pre><div class="notion-text notion-block-b8de09386e5b45e7a5f0ae8bfc054707">也就是说 <code class="notion-inline-code">1000</code> 的写法默认类型为 <code class="notion-inline-code">int</code> ，编译器会尝试做一次类型转换 <code class="notion-inline-code">int</code> → <code class="notion-inline-code">time.Duration</code> ，而 <code class="notion-inline-code">int64</code> 和 <code class="notion-inline-code">int</code> 又能做到完全兼容，所以编译通过。</div><div class="notion-blank notion-block-bb978502225d458d8ea95627d61232a4"> </div><div class="notion-text notion-block-73679d6edd4946938e9b7e3de693eee1">WTF，Go…</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-387dcc99be4b4d9bb32787dccb641d7b" data-id="387dcc99be4b4d9bb32787dccb641d7b"><span><div id="387dcc99be4b4d9bb32787dccb641d7b" class="notion-header-anchor"></div><a class="notion-hash-link" href="#387dcc99be4b4d9bb32787dccb641d7b" title="参考："><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">参考：</span></span></h3><ul class="notion-list notion-list-disc notion-block-ba5cdf07de3944ea84183d9fab8c5efb"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://go.dev/blog/constants">https://go.dev/blog/constants</a> （本文主要搬运来源）</li></ul><ul class="notion-list notion-list-disc notion-block-f7b45bfc8bf8475193cb2ae92d69b169"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://blog.learngoprogramming.com/learn-golang-typed-untyped-constants-70b4df443b61">https://blog.learngoprogramming.com/learn-golang-typed-untyped-constants-70b4df443b61</a></li></ul><div class="notion-blank notion-block-3554b88ab160438cae51c7eecbae9b14"> </div></main>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Google 软件工程 读后感 Part I]]></title>
        <id>https://next.emergencyexit.xyz//software-engineering-at-google-impression</id>
        <link href="https://next.emergencyexit.xyz//software-engineering-at-google-impression"/>
        <updated>2022-09-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[有趣的比喻集合]]></summary>
        <content type="html"><![CDATA[<main class="notion light-mode notion-page notion-block-3927ece3993146e88e7e91d5e0b5c326"><div class="notion-viewport"></div><div class="notion-text notion-block-ec27187857af4dd7909a8b90936e43ea">总的来说，这本书值得所有软件开发从业者阅读。一些观点可能不至于奉之圭臬，但也可以提供另一种处理问题的视角。</div><div class="notion-text notion-block-897150010d224de4ba48d1ff6f8b1392">它将很多<b>存在于意识而尚未落成语言的软件工程共识</b>，用简单易读的方式总结表达了出来，相信对于大多数软件工程师都会有帮助。</div><div class="notion-text notion-block-c2ba7cfd50b3425084f45603fcbff89f">分享书中一些有趣的说法，如果你也觉得有意思，那么就买来读一读吧。</div><div class="notion-text notion-block-39594e9a3fce41e49b9a5210fdf01fa3">（如果你的「洋文🤓」够好，也可以直接<span class="notion-teal"><b>免费</b></span>阅读 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://abseil.io/resources/swe-book/html/toc.html">英文原版</a>）</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-07d4b358fcd44b0b90fb5a295bd4b1dd" data-id="07d4b358fcd44b0b90fb5a295bd4b1dd"><span><div id="07d4b358fcd44b0b90fb5a295bd4b1dd" class="notion-header-anchor"></div><a class="notion-hash-link" href="#07d4b358fcd44b0b90fb5a295bd4b1dd" title="海勒姆定律（Hyrum’s Law）"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">海勒姆定律（Hyrum’s Law）</span></span></h3><blockquote class="notion-quote notion-block-57a7a82e02e64c1ca392536ae1ba3027">当一个 API 有足够多的用户时，在约定中你所承诺的已不重要：所有在你系统里面被观察到的行为都会被一些用户所依赖。</blockquote><div class="notion-text notion-block-4a142d26df674781897ce80fd220c487">我从中读出来的关键点：拒绝侥幸心理。当用户体量足够大时，任何改动都需要通过测试来收尾，侥幸心理自认为某些逻辑人畜无害，一两次可能可以省事儿，但总有一天会翻船。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-78bb3c9293c94075b5e2d2754f376ba1" data-id="78bb3c9293c94075b5e2d2754f376ba1"><span><div id="78bb3c9293c94075b5e2d2754f376ba1" class="notion-header-anchor"></div><a class="notion-hash-link" href="#78bb3c9293c94075b5e2d2754f376ba1" title="巴士系数（Truck Factor）"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">巴士系数（<b>Truck Factor</b>）</span></span></h3><blockquote class="notion-quote notion-block-c067d91017c642edaf839e01370db824">指多少关键开发者被巴士撞了会让项目停摆。</blockquote><div class="notion-text notion-block-11cde37630c343f0a75319a674254b53">开发者被巴士撞了虽然有点残忍，但确实是一个很形象的表述——当成员突然不参与工作或失去通讯能力。可能在很多团队中，开发者的<b>突然离职</b>是更贴近这种场景的情况。想要尽量避免因为关键人物的离开而导致项目停摆，书中也列举了基础的预防措施：备份或者结对编程，“每一个人在工作时都需要第二双眼睛的监督”，最重要的是 “拒绝隐藏”。</div><div class="notion-text notion-block-33bed20e701b40cb81c0322f955c84b9">就我个人的经验而言，在项目开发过程中保持良好的文档记录习惯是一种“美德”，在一些更有追求的团队，更应该是“义务”。良好的文档可以一定程度上保持当“巴士”袭来时，团队能够依靠文档维持相当程度的稳定。</div><div class="notion-text notion-block-ec305ffabbeb455098df8f3d02b657c0">当然以上都是从 <b>“团队最优” </b>的角度来说，并不是所有公司都有 Google 的优秀风气，我还在别的团队听过”教会徒弟，饿死师傅“的说法。</div><div class="notion-text notion-block-e4707ad77bbc4cafb4441ddf3eba5912">这其中孰对孰错，是分享还是私藏，很难在这篇读后感中用几百字讨论清楚。</div><div class="notion-text notion-block-6898e8ff30cf46638d1d72ec2c563dad">我们需要保持清醒：互联网从业有它的特殊性——知识获取门槛极低，任何领域都可以通过网络资源轻松入门，但同时也有其他行业相似的普遍性——在资本逐利的背景下，行业失去高增长，更低成本的人力总是会更有竞争力。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-0f50d6ae1c1e4bf4a295cb1abb100879" data-id="0f50d6ae1c1e4bf4a295cb1abb100879"><span><div id="0f50d6ae1c1e4bf4a295cb1abb100879" class="notion-header-anchor"></div><a class="notion-hash-link" href="#0f50d6ae1c1e4bf4a295cb1abb100879" title="左移思想（Left Shift）"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">左移思想（Left Shift）</span></span></h3><blockquote class="notion-quote notion-block-8864520720f8419ab3d1ea039198f93d">在开发人员工作流的早期发现问题通常会降低成本。</blockquote><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-64e5a128d5ba4638a1c92360e5482d1a"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:432px;max-width:100%;flex-direction:column"><img style="object-fit:contain" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F33295efc-1f2c-441e-8829-fb516edd724c%2FUntitled.png?table=block&amp;id=64e5a128-d5ba-4638-a1c9-2360e5482d1a&amp;cache=v2" loading="lazy" alt="notion image" decoding="async"/></div></figure><div class="notion-text notion-block-12c690895f02451998de285e999ba4b5">配合此图，还是非常容易理解的。从开发人员的角度来看，可能存在的问题在越前端解决付出的成本肯定是越小的。举个小例子，陶文在 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://zhuanlan.zhihu.com/p/357411780">《不要以 DRY 之名，发明低代码 DSL 去残害你的同事》</a>提到过，缺乏与上游（比如产品、策划）的沟通，只是在开发侧 “一厢情愿” 的抽象可能是一个误区：“先要把需求的源头给按住了。而不是在需求的下游，用可复用抽象代码来兜底”。</div><div class="notion-text notion-block-aac58e9671844d35ad0ccc013e987983">类似地，在敏捷开发和 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://devops.com/devops-shift-left-avoid-failure/">DevOps 开发理论中也提到过</a> ，同时还有一个 “<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://devops.com/shift-right-testing-the-emergence-of-testops/">测试右移</a>” 的概念，在测试或者是性能检查时，尽量从贴近用户端出发来保证整个产品流程的质量。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-0d9a2e22b9e049a8bac1ff5ca37930de" data-id="0d9a2e22b9e049a8bac1ff5ca37930de"><span><div id="0d9a2e22b9e049a8bac1ff5ca37930de" class="notion-header-anchor"></div><a class="notion-hash-link" href="#0d9a2e22b9e049a8bac1ff5ca37930de" title="经理人炎症（Manageritis）"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">经理人炎症（Manageritis）</span></span></h3><blockquote class="notion-quote notion-block-0fe7688ff117426b89f4240ba74b020c">对于处于进步边缘的有抱负的或者那些刚刚晋升的领导者，存在一种高度危险的自我炎症，称为“管理炎”。</blockquote><div class="notion-text notion-block-f6c396005f6a40a086d0c1750da40ca2">更简单说法是 “刻意管理”，这种症状多数出现在从个人贡献者 → 管理者身份转变期。很大的原因是，作为技术开发者，我们已经很习惯于在专业技能上投资，并有着合适的回报预期：比如定期在某个领域深入学习，你就能立马获得该领域的技能提升。但是转变到“经理”时，这个回报周期变得不一样了（通常会更长），带领团队向上提升，个体的技能成长反而不容易被感知，会导致做出更高频次的“投资”动作，更加”努力管理”，更容易显得刻意。</div><div class="notion-text notion-block-5dee97aa820d411fbc7f0b9e60bcc51b">还有一个方面的原因，从个人贡献者到管理者后，将会面临很多抉择的场景：<em>自己动手，快速解决问题 </em>vs <em>交给他人，更慢更困难地解决问题</em>，及时从更长尺度上来看，后者收益会更高，但在这个抉择面前，没有经验的管理者还是会显得非常犹豫。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-af607e49d1ed49c0ad3bb362bf92ffbe" data-id="af607e49d1ed49c0ad3bb362bf92ffbe"><span><div id="af607e49d1ed49c0ad3bb362bf92ffbe" class="notion-header-anchor"></div><a class="notion-hash-link" href="#af607e49d1ed49c0ad3bb362bf92ffbe" title="碧昂丝规则（Beyoncé Rule）"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">碧昂丝规则（Beyoncé Rule）</span></span></h3><blockquote class="notion-quote notion-block-08f7f47edaa44f40a7387935ba510099">“如果你喜欢它，你就应该测试它”。</blockquote><div class="notion-text notion-block-06be070f5c2f4fe29ec84970faf12195">原型是：&quot;If you liked it then you shoulda put a ring on it”，来自于碧昂斯 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.youtube.com/watch?v=4m1EFMoRFvY">Single Lady(Put a Ring on It)</a> 歌词（我感觉关联性不大，我猜是碧昂斯粉丝的私货 🤣）。</div><div class="notion-text notion-block-b55310de83394d8a8578c751aa107df5">意思是“所有不想被破坏的东西”都应该被测试。当你的项目依赖于某些外部系统时，如果想确保一些特性能够符合预期，那么唯一的办法就是在自己的项目编写测试。</div><div class="notion-text notion-block-7b582dc921d64925af13c234ff261fe9">这一点容易被泛化到外部系统的所有特性，我的理解是需要妥善处理依赖的外部系统<b>常见的重点场景</b>出现异常的情况，而不是全部，也不应该关注全部。</div><div class="notion-text notion-block-140a4fcfb666460b9428f70357693cbd">在 Google 内部常有一种说法：“如果一个产品由于基础设施的变更出现中断或其它问题，但是在我们的持续集成(CI)系统中的自动化测试用例并没有发现这个问题，那么就不应该由负责基础设施的团队承担责任。”</div><div class="notion-text notion-block-c0789386a8ff49b3941623f22c3334df">在我们日常的工作场景中，大家普遍是没有这个意识的，如果基础设施出问题，无论我们是否有预料，黑锅都可以毫无负担的甩下去，也造成基础设施部门普遍承受了过多压力 xD。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-42d3995b003b481b880565f8f241d6b8" data-id="42d3995b003b481b880565f8f241d6b8"><span><div id="42d3995b003b481b880565f8f241d6b8" class="notion-header-anchor"></div><a class="notion-hash-link" href="#42d3995b003b481b880565f8f241d6b8" title="Fin"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Fin</span></span></h3><div class="notion-text notion-block-f4922f38c9ce4edc8ea1d08ddecb407b">书中还有一些更大值得讨论的话题，以后或许有机会可以结合自己的项目经历写出来聊聊<em><s>（典型的挖坑不埋）</s></em>。</div><div class="notion-blank notion-block-161f0f3cd34d432493910405685342ba"> </div></main>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Django ORM：天使与魔鬼 II]]></title>
        <id>https://next.emergencyexit.xyz//django-orm-best-practice-II</id>
        <link href="https://next.emergencyexit.xyz//django-orm-best-practice-II"/>
        <updated>2022-09-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[CRUD boy 回来了]]></summary>
        <content type="html"><![CDATA[<main class="notion light-mode notion-page notion-block-6ad26f7b18284d64a9483cc6367f6901"><div class="notion-viewport"></div><div class="notion-text notion-block-917f169ee9c34019a62c5f85892e3620">最近重操 CRUD 旧业，又有一些新的发现，故增加一篇 <a class="notion-link" href="https://www.notion.so/982e294cabb247aa878134d8bb6fd6ce">Django ORM：天使与魔鬼</a> Part II。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-4d19de6795b04c9f89f8e3a758d0954c" data-id="4d19de6795b04c9f89f8e3a758d0954c"><span><div id="4d19de6795b04c9f89f8e3a758d0954c" class="notion-header-anchor"></div><a class="notion-hash-link" href="#4d19de6795b04c9f89f8e3a758d0954c" title="利用 batch_size 控制数据库单次提交的大小"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">利用 batch_size 控制数据库单次提交的大小</span></span></h3><div class="notion-text notion-block-4441855d1bb34da0aed6aa17fcf05202"><code class="notion-inline-code">bulk_create</code> 和 <code class="notion-inline-code">bulk_update</code> 是我们常用的批量创建、更新的方法，但批量提速一时爽，提交过长会直接导致任务失败。</div><div class="notion-text notion-block-5c409ae54dae4b2b882909acbbeec43c">之前没有细致查阅文档，想当然 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/TencentBlueKing/bk-user/blob/cd3d14b72d92de0cf687e9466a797b9fd07e0daf/src/api/bkuser_core/common/db_sync.py#L140">手写了批量提交分片的逻辑</a> ，虽然也完全实现了功能，但终究多了一份需要维护的逻辑，实际上直接用 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/querysets/#bulk-create">Django 默认提供的 </a><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/querysets/#bulk-create"><code class="notion-inline-code">batch_size</code></a> 即可。</div><pre class="notion-code language-python"><code class="language-python">from itertools <span class="token keyword">import</span> islice

batch_size <span class="token operator">=</span> <span class="token number">100</span>
objs <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">Entry</span><span class="token punctuation">(</span>headline<span class="token operator">=</span><span class="token string">'Test %s'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">while</span> <span class="token literal-property property">True</span><span class="token operator">:</span>
    batch <span class="token operator">=</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token function">islice</span><span class="token punctuation">(</span>objs<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> not batch<span class="token operator">:</span>
        <span class="token keyword">break</span>
    Entry<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token function">bulk_create</span><span class="token punctuation">(</span>batch<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span></code></pre><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-4560c1f2cdc34fc8b26c830584140494" data-id="4560c1f2cdc34fc8b26c830584140494"><span><div id="4560c1f2cdc34fc8b26c830584140494" class="notion-header-anchor"></div><a class="notion-hash-link" href="#4560c1f2cdc34fc8b26c830584140494" title="通过 Prefetch 控制预取的查询"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">通过 Prefetch 控制预取的查询</span></span></h3><div class="notion-text notion-block-942fb49c92dd440eacbde16315aa4e4c"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://stackoverflow.com/questions/97197/what-is-the-n1-selects-problem-in-orm-object-relational-mapping">N + 1 问题</a>是非常常见的查询效率杀手。在 Django 中我们通常会使用 <code class="notion-inline-code">selected_related</code> 或<code class="notion-inline-code">prefetch_related</code> 来预取关联对象，来减少和 DB 之间的交互，但是在使用上也需要有一些注意的地方。</div><div class="notion-text notion-block-29fd3c9a717c4acaa7d4af894c3bf0e7">首先，预取需要精确控制到字段。</div><div class="notion-text notion-block-e116a47ba91e4fe3a33d9bbd54be8429">Django 默认的查询方式都是粗放的，例如普通查询不使用 <code class="notion-inline-code">values</code> 或者 <code class="notion-inline-code">only</code> 时都是 <code class="notion-inline-code">select *</code> ，而预取也不例外，看看下面这个例子。</div><pre class="notion-code language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token operator">:</span>
	<span class="token operator">...</span>

<span class="token keyword">class</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token operator">:</span>
	foo <span class="token operator">=</span> models<span class="token punctuation">.</span><span class="token function">ForeignKey</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span>
	<span class="token operator">...</span>

<span class="token keyword">class</span> <span class="token class-name">Baz</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token operator">:</span>
  <span class="token string">""</span><span class="token string">"A very large table"</span><span class="token string">""</span>
	foo <span class="token operator">=</span> models<span class="token punctuation">.</span><span class="token function">ForeignKey</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span></code></pre><div class="notion-text notion-block-844a600b3a5c44fb806ca38269fa0a16">我们在查询 <code class="notion-inline-code">Foo</code> 时，会尝试预取关联字段以加速后续数据读取，但如果我们在调用时不加任何参数：<code class="notion-inline-code">Foo.objects.all().prefetch_related()</code> ，<b>默认地 Django 会将所有关联字段都取出来</b>，加入 <code class="notion-inline-code">Baz</code> 表无比巨大，本来用作性能优化的 <code class="notion-inline-code">prefetch_related</code> 就会摇身变成耗时怪兽。</div><div class="notion-text notion-block-05eabf30586c4efd84335bcd09602fed">此外，我们还会遇到级联预取的场景。</div><pre class="notion-code language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token operator">:</span>
	<span class="token operator">...</span>

<span class="token keyword">class</span> <span class="token class-name">Bar</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token operator">:</span>
	foo <span class="token operator">=</span> models<span class="token punctuation">.</span><span class="token function">ForeignKey</span><span class="token punctuation">(</span>Foo<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">"bars"</span><span class="token punctuation">)</span>
	<span class="token operator">...</span>

<span class="token keyword">class</span> <span class="token class-name">Baz</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token operator">:</span>
	bar <span class="token operator">=</span> models<span class="token punctuation">.</span><span class="token function">ForeignKey</span><span class="token punctuation">(</span>Bar<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">"bazs"</span><span class="token punctuation">)</span>
	large_config <span class="token operator">=</span> models<span class="token punctuation">.</span><span class="token function">JSONField</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token operator">...</span></code></pre><div class="notion-text notion-block-f2e6729bc91346c6ad21fd1a2bcd4ff4">此时在后续的循环处理中，我们需要通过 <code class="notion-inline-code">Foo</code> 对象查询到 <code class="notion-inline-code">Baz</code> 的数据，为了避免 N + 1 我们也会多级预取:</div><pre class="notion-code language-python"><code class="language-python">Foo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select_related</span><span class="token punctuation">(</span><span class="token string">"bars"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prefetch_related</span><span class="token punctuation">(</span><span class="token string">"bars__bazs"</span><span class="token punctuation">)</span></code></pre><div class="notion-text notion-block-e7a383c89d8a47d98bb03ea1215373c5">此时二级预取也是默认获取全部字段，倘若 <code class="notion-inline-code">Baz</code> 表中有一个需要额外耗时序列化的字段，同样会使优化适得其反。这时可以考虑引入 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://docs.djangoproject.com/zh-hans/4.1/ref/models/querysets/#prefetch-objects"><code class="notion-inline-code">Prefetch</code></a> 对象，做更细致的查询控制。</div><pre class="notion-code language-python"><code class="language-python">Foo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">select_related</span><span class="token punctuation">(</span><span class="token string">"bars"</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">prefetch_related</span><span class="token punctuation">(</span>
	<span class="token function">Prefetch</span><span class="token punctuation">(</span><span class="token string">"bars__bazs"</span><span class="token punctuation">,</span> queryset<span class="token operator">=</span>Baz<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token string">"large_config"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span></code></pre><div class="notion-blank notion-block-49ad21cac56745f889392cedcb9e5b71"> </div><div class="notion-text notion-block-744cc7796009402fab94db362da28356">是不是觉得 ORM 查询本身也挺繁杂的？用 SQL 有时会更直接清晰地多。所以也会有一些完全<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://dev.solita.fi/2021/06/01/why-avoid-an-orm.html">不使用 ORM 的观点</a>。在我看来，ORM 能让 90% 的查询都变得结构化更清晰、更易维护、甚至更安全，但剩下的 10% 也许会耗费更多的精力，所以何时使用 ORM 是根据具体项目场景来定的，不能因噎废食。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-b5a4d66ac57a4ca8b13e1028109b39c7" data-id="b5a4d66ac57a4ca8b13e1028109b39c7"><span><div id="b5a4d66ac57a4ca8b13e1028109b39c7" class="notion-header-anchor"></div><a class="notion-hash-link" href="#b5a4d66ac57a4ca8b13e1028109b39c7" title="小广告"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">小广告</span></span></h3><div class="notion-text notion-block-f88ddea20edb497b87e46b9377a818d2">是不是觉得 Part II 内容有点少？没关系，更多的内容我都放在了这里。</div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-11be5a01c4ec4b2abb68cbf4b3bc73dc" href="https://github.com/TencentBlueKing/python-best-practices"><div><div class="notion-bookmark-title">GitHub - TencentBlueKing/python-best-practices</div><div class="notion-bookmark-description">Contribute to TencentBlueKing/python-best-practices development by creating an account on GitHub.</div><div class="notion-bookmark-link"><img src="https://github.com/favicon.ico" alt="GitHub - TencentBlueKing/python-best-practices" loading="lazy"/><div>https://github.com/TencentBlueKing/python-best-practices</div></div></div><div class="notion-bookmark-image"><img src="https://opengraph.githubassets.com/e9d11601584d87c0fbb4092264f7ab23a33987f8d05dfb8b0e0c57157aecc9b3/TencentBlueKing/python-best-practices" alt="GitHub - TencentBlueKing/python-best-practices" loading="lazy"/></div></a></div><div class="notion-text notion-block-c4cb7b9d7d92463eb7dd154161269031">我和团队小伙伴整理了很多 Python\Django\DRF 的最佳实践经验，项目会持续更新，欢迎一起探讨维护，希望每一个 CRUD 男孩/女孩都能少踩坑。</div></main>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ReDoS：正则也许会让你的系统更脆弱]]></title>
        <id>https://next.emergencyexit.xyz//redos-and-why</id>
        <link href="https://next.emergencyexit.xyz//redos-and-why"/>
        <updated>2022-03-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[“充数的文章描述”]]></summary>
        <content type="html"><![CDATA[<main class="notion light-mode notion-page notion-block-9d18b689cdc24d3f81daa690c700caee"><div class="notion-viewport"></div><div class="notion-table-of-contents notion-gray notion-block-71c5c2ad3a0042a5854d1ffd540fb85b"><a href="#16167b014e884180872922c343d81f2f" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:0">引</span></a><a href="#06a24e1d70ff4b4d8890c4411ad92c88" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:0">Evil Regex 大敌当前</span></a><a href="#11ab27b4d2ec4f7399a9aecafa750e00" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:0">知己知彼，百战不殆</span></a><a href="#1596c45ca40b4f4998f3be993530b2ee" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:24px">NFA vs DFA</span></a><a href="#b0f1e34a5f0242bb83f7f49d56c2621f" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:24px">Thompson NFA 构造 vs DFA</span></a><a href="#ddeb7f785eb14d7b868a6917822d6ab5" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:24px">为什么主流编程语言这么慢？</span></a><a href="#6e320bb2c4334d31af6172db35ede111" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:0">正面对抗 Evil Regex</span></a><a href="#8a414c655d0842eb9a242a88266b28e7" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:24px">pyre2</span></a><a href="#12c4a78bedf14dcf8397441db47e3f36" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:24px">regex</span></a><a href="#8ef69d8b54184936a684009d1c35948e" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:0">总结</span></a></div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-16167b014e884180872922c343d81f2f" data-id="16167b014e884180872922c343d81f2f"><span><div id="16167b014e884180872922c343d81f2f" class="notion-header-anchor"></div><a class="notion-hash-link" href="#16167b014e884180872922c343d81f2f" title="引"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">引</span></span></h3><div class="notion-text notion-block-64a4a303b845467c8de321306c3fee84">这里有一段看起来稀松平常、人畜无害的 Python 代码，你可以试着执行一下：</div><pre class="notion-code language-python"><code class="language-python"><span class="token keyword">import</span> re
<span class="token keyword">import</span> time


value <span class="token operator">=</span> <span class="token string">"aaaaaaaaaaaaaaaaaaaaaaaaaaaaabs"</span>
strange_regex <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(a+)+s"</span><span class="token punctuation">)</span>

start <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
re<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>strange_regex<span class="token punctuation">,</span> value<span class="token punctuation">)</span>
end <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">print</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span></code></pre><div class="notion-text notion-block-6bb9397fa1ab4801b7edd5bff3e9243b">不知道大家执行了多久，在我开发机上使用 Python 3.6+（包括 3.10.x）<b>需要耗费20秒以上</b>，即使 CPU ——Apple M1 Pro 的性能已经相当强悍了。</div><div class="notion-text notion-block-e33e99798c1f48bd897156f2a344cbf3">可以试想一下，如果在生产环境服务的关键请求链路中存在这样正则匹配，加上不可控的用户输入，很容易落入“性能陷阱”，轻则拖慢系统，重则直接让服务暴露在 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://en.wikipedia.org/wiki/ReDoS">ReDoS</a> (Regual Expression Denial-of-Service) 的风险之下。</div><div class="notion-text notion-block-429048f3ea3c4f989258b2e1a3aa81c4">随手一搜，已经有不少相关的案例发生：<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-23343">CVE-2021-23343</a> 、<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-41817">CVE-2021-41817</a>。所以，它值得我们格外重视。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-06a24e1d70ff4b4d8890c4411ad92c88" data-id="06a24e1d70ff4b4d8890c4411ad92c88"><span><div id="06a24e1d70ff4b4d8890c4411ad92c88" class="notion-header-anchor"></div><a class="notion-hash-link" href="#06a24e1d70ff4b4d8890c4411ad92c88" title="Evil Regex 大敌当前"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Evil Regex 大敌当前</span></span></h3><div class="notion-text notion-block-421e347965f04238accb85b4748a20b0">先来看一些和上面例子类似的、典型的邪恶正则：</div><ul class="notion-list notion-list-disc notion-block-98d8301372354699a816e8fd5bc08002"><li><code class="notion-inline-code">(a+)+</code></li></ul><ul class="notion-list notion-list-disc notion-block-0d6cd58d075b49089d85ceaf2ab1753e"><li><code class="notion-inline-code">([a-zA-Z]+)*</code></li></ul><ul class="notion-list notion-list-disc notion-block-51804104983f4c3981f8d0f152a88f9f"><li><code class="notion-inline-code">(a|aa)+</code></li></ul><ul class="notion-list notion-list-disc notion-block-d0d2e591195a4ac8b863524a9b98eba7"><li><code class="notion-inline-code">(a|a?)+</code></li></ul><ul class="notion-list notion-list-disc notion-block-c6b2c4201dcd4463b918ba3275a4887b"><li><code class="notion-inline-code">(a|a)+$</code></li></ul><ul class="notion-list notion-list-disc notion-block-b4e5e7f0f44740ff8b09a30eb3ab254a"><li> <code class="notion-inline-code">(.*a){x} for x \&gt; 10</code></li></ul><div class="notion-text notion-block-95a16b9277c84bd788ffad18af9382a9">它们都有共同的一些特点：</div><ul class="notion-list notion-list-disc notion-block-eb56bd6f90c74deaaf58989c90b25b0a"><li>存在子表达重复——形如 <code class="notion-inline-code">()+</code> 、 <code class="notion-inline-code">()*</code></li></ul><ul class="notion-list notion-list-disc notion-block-0f99c854d6a74797b1fb0c53db1de6a8"><li>在重复的子表达中：</li><ul class="notion-list notion-list-disc notion-block-0f99c854d6a74797b1fb0c53db1de6a8"><li>存在重复项—— <code class="notion-inline-code">(a+)+</code></li><li>存在交替重复—— <code class="notion-inline-code">(a|aa)+</code></li></ul></ul><ul class="notion-list notion-list-disc notion-block-481496a757be470f9f6e511dc06659e9"><li>在重复的子表达的末尾，存在一个子表达式无法匹配的内容，例如 <code class="notion-inline-code">(a|a)+$</code></li></ul><div class="notion-text notion-block-a492ebc689144979995324686ba5ca7f">那么为什么这些重复会导致匹配速度如此之慢呢？我们要看看正则的具体实现思路。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-11ab27b4d2ec4f7399a9aecafa750e00" data-id="11ab27b4d2ec4f7399a9aecafa750e00"><span><div id="11ab27b4d2ec4f7399a9aecafa750e00" class="notion-header-anchor"></div><a class="notion-hash-link" href="#11ab27b4d2ec4f7399a9aecafa750e00" title="知己知彼，百战不殆"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">知己知彼，百战不殆</span></span></h3><div class="notion-text notion-block-492dbeb1cfc1451b95d0a1dbecd70d7a">当前主流语言的正则实现机制都是构建<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://en.wikipedia.org/wiki/Nondeterministic_finite_automaton"><b>非确定有限状态自动机(NFA)</b></a><b> </b>，相较于<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://en.wikipedia.org/wiki/Deterministic_finite_automaton"><b>确定有限状态自动机(DFA)</b></a>，前者会使用<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://en.wikipedia.org/wiki/Backtracking">回溯法(backtracking)</a>，这也是导致邪恶正则存在的根因。</div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-1596c45ca40b4f4998f3be993530b2ee" data-id="1596c45ca40b4f4998f3be993530b2ee"><span><div id="1596c45ca40b4f4998f3be993530b2ee" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1596c45ca40b4f4998f3be993530b2ee" title="NFA vs DFA"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">NFA vs DFA</span></span></h4><div class="notion-text notion-block-3f9b78a623b0451c9cf0799a903fdc0b">（该章节中的图例均来自<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://swtch.com/~rsc/regexp/regexp1.html">这篇文章</a>，我在这里做了内容简化，建议有兴趣的同学阅读英文原文）</div><div class="notion-text notion-block-620943d008c0426da775e5a82b0f2f74">FA 有限自动机，又称 FSM 有限状态机，在当前的语境下，我们统一都是用 FA 来描述。这种计算模型比较常见，所以我们就着重关注 NFA 和 DFA 的对比。</div><div class="notion-text notion-block-36f538b5c08e41df94547097e1490efd">首先，来看一个简单的正则表达式—— <code class="notion-inline-code">a(bb)+a</code> ，它可以转换成以下两种表达：</div><div class="notion-row notion-block-8b914cd473c64b568ab10330ec59c60f"><div class="notion-column notion-block-9cbe557272fc42eb982c33bdfb7972bd" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-64d3af5c94464206883ad1543abd6203"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:54px"><img style="object-fit:contain" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fe41cc1a4-ae04-422e-8a4d-22e77e03d496%2FUntitled.png?table=block&amp;id=64d3af5c-9446-4206-883a-d1543abd6203&amp;cache=v2" loading="lazy" alt="DFA" decoding="async"/><figcaption class="notion-asset-caption">DFA</figcaption></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-3a10ae26ed6b4fee9b000d4e03623deb" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-6fdf1be8b201455488080f316c0cea35"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:54px"><img style="object-fit:contain" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F18765429-1c82-4046-9afe-21a3a68d505d%2FUntitled.png?table=block&amp;id=6fdf1be8-b201-4554-8808-0f316c0cea35&amp;cache=v2" loading="lazy" alt="NFA" decoding="async"/><figcaption class="notion-asset-caption">NFA</figcaption></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-351ce2ee5b03445fa5e21f10c9d4c8f5">上面两张图能够很清晰地表现出二者的不同：</div><ul class="notion-list notion-list-disc notion-block-0f74de50e44b48628c88eb34d668addd"><li>DFA 中，每一个状态在接收到输入时，下一个状态都是确定的。</li></ul><ul class="notion-list notion-list-disc notion-block-6db506c14054421eb3826a97952bf93c"><li>NFA 中，存在某些状态在接收到输入时，无法确定下一个状态：例如图中的 S2 接收到字符 b，S1 和 S3 都是可能的下一个状态。所以系统在分支选择时，需要进行猜测。</li></ul><div class="notion-text notion-block-1b2eff3ae49e4c19b23519afe1033bfd">理论上，每一条正则表达式都可以等同转换成一个 NFA 状态机，那么如果使用 NFA 进行匹配，如何处理猜测分支就很重要了。下面我们来看一个简单遍历猜测的例子。</div><div class="notion-text notion-block-61de96581b8649f9a63000513ca7458b">根据正则 <code class="notion-inline-code">abab|abbb</code> 我们可以建立如下的 NFA：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-a81212ec0de24ed5befc71a01610d802"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:364px;max-width:100%;flex-direction:column"><img style="object-fit:contain" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F100299f6-ef9d-41f6-b77c-dfbcb1644614%2FUntitled.png?table=block&amp;id=a81212ec-0de2-4ed5-befc-71a01610d802&amp;cache=v2" loading="lazy" alt="notion image" decoding="async"/></div></figure><div class="notion-text notion-block-9d8ec084d55741759e4c296c58045065">模拟计算机匹配输入 <code class="notion-inline-code">abbb</code>，可以有如下两种路径：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-e4c28ba34b134c6ca5a9a0d69c02ed8f"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:contain" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F2d01c07f-0cde-40f3-8ad1-837137c1d9d8%2FUntitled.png?table=block&amp;id=e4c28ba3-4b13-4c6c-a5a9-a0d69c02ed8f&amp;cache=v2" loading="lazy" alt="notion image" decoding="async"/></div></figure><div class="notion-text notion-block-0fd8ce7c02894191b05b1c13de3bf6d6">以 Step 0 开始的路径，在匹配到第三个字符时出错，此时不得不采用回溯，再次从一开始进行匹配，即 Step 4 → Step 8。</div><div class="notion-text notion-block-98ec072a50a04ad68c2e3b7317d2b355">通过这个回溯方法，我们来思考正则表达式 <span role="button" tabindex="0" class="notion-equation notion-equation-inline"><span></span></span> 与字符串 <span role="button" tabindex="0" class="notion-equation notion-equation-inline"><span></span></span> 匹配：</div><div class="notion-text notion-block-50124f3a5808418c8ce289482e7c3f29">如果每一次判断 <span role="button" tabindex="0" class="notion-equation notion-equation-inline"><span></span></span> 是否存在时，都会尝试匹配“存在”的情况，再匹配不存在的情况，而整个字符串长度为 <span role="button" tabindex="0" class="notion-equation notion-equation-inline"><span></span></span>，也就是时间复杂度为  <span role="button" tabindex="0" class="notion-equation notion-equation-inline"><span></span></span>。</div><div class="notion-text notion-block-d65ba5a0c9b140f9a94c6fd9c0987fce">当前主流的语言（Perl, PCRE, Python, Ruby等）采用了<b>递归</b>来实现深度优先回溯，相较于 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://en.wikipedia.org/wiki/Thompson%27s_construction">Thompson NFA</a>，最终实现的效果都是惊人的糟糕。</div><div class="notion-row notion-block-4088dc8fdb2b46e39e930be62fcd58b6"><div class="notion-column notion-block-cf952c80f58d42c494f54b20d578f2b2" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-08040b98a5b94de2945d4247f370a6ec"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:301px;max-width:100%;flex-direction:column"><img style="object-fit:contain" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F62d6c97a-651f-4dae-9157-3711b51864ef%2FUntitled.png?table=block&amp;id=08040b98-a5b9-4de2-945d-4247f370a6ec&amp;cache=v2" loading="lazy" alt="notion image" decoding="async"/></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-98b4b7afbadd4ca487963dc17f121754" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-46b7fb61de5e43cda2bb4539a1289ce4"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:302px;max-width:100%;flex-direction:column"><img style="object-fit:contain" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc1b2f543-8d54-4deb-be08-868bc57b76b6%2FUntitled.png?table=block&amp;id=46b7fb61-de5e-43cd-a2bb-4539a1289ce4&amp;cache=v2" loading="lazy" alt="notion image" decoding="async"/></div></figure></div><div class="notion-spacer"></div></div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-b0f1e34a5f0242bb83f7f49d56c2621f" data-id="b0f1e34a5f0242bb83f7f49d56c2621f"><span><div id="b0f1e34a5f0242bb83f7f49d56c2621f" class="notion-header-anchor"></div><a class="notion-hash-link" href="#b0f1e34a5f0242bb83f7f49d56c2621f" title="Thompson NFA 构造 vs DFA"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Thompson NFA 构造 vs DFA</span></span></h4><div class="notion-text notion-block-afff615182dc435797079cc33b8aefd7">为什么使用了 Thompson NFA 构造出的正则匹配会快这么多呢？主要的原因是：通过划分多个子表达式，合并相同的内容，从而减少了回溯次数。</div><div class="notion-text notion-block-6cdd0a3f42c640deb1ff811859b6d99d"><span role="button" tabindex="0" class="notion-equation notion-equation-inline"><span></span></span> 可以转换成 Thompson 构造，图示：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-bd7f13b291b6492a8f8a5d6ca6538309"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:contain" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F72c2591d-be7f-4f93-b93b-30904f2f6b6c%2FUntitled.png?table=block&amp;id=bd7f13b2-91b6-492a-8f8a-5d6ca6538309&amp;cache=v2" loading="lazy" alt="notion image" decoding="async"/></div></figure><div class="notion-text notion-block-4adb904d36044ce89832ec563f19787d">稍微做一些解释：</div><ul class="notion-list notion-list-disc notion-block-294f0999d9db457992ec78d4fcf9fe15"><li>q 是开始，f 是结束，白圈是状态，连线是流转</li></ul><ul class="notion-list notion-list-disc notion-block-c912429971304c0ca8c14ebace72871d"><li>ε 代表着无输入</li></ul><div class="notion-text notion-block-9e2bbaa903264df6abc8ed9da0294974">通过以上的结构，Thompson NFA 匹配的时间复杂度为  <span role="button" tabindex="0" class="notion-equation notion-equation-inline"><span></span></span>，空间复杂度为<span role="button" tabindex="0" class="notion-equation notion-equation-inline"><span></span></span>。</div><div class="notion-blank notion-block-260ec4a9ed5046938614b4ab45ae7d56"> </div><div class="notion-text notion-block-bd241b5ae0bf4d23b71a7cdd8c3e8648">而 DFA 更容易理解，因为它是典型的空间换时间。</div><div class="notion-row notion-block-8b5cf75e5a9943e0899a0d186eb3497b"><div class="notion-column notion-block-acc05c036d394d77997d269693990926" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-dd9acf4affef4e29a77df33a9f6ee061"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:424px;max-width:100%;flex-direction:column"><img style="object-fit:contain" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F7febb121-726d-47a6-80c5-9351397addd6%2FUntitled.png?table=block&amp;id=dd9acf4a-ffef-4e29-a77d-f33a9f6ee061&amp;cache=v2" loading="lazy" alt="NFA" decoding="async"/><figcaption class="notion-asset-caption">NFA</figcaption></div></figure></div><div class="notion-spacer"></div><div class="notion-column notion-block-c621a865b06447f4b2fd833d81b688d3" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-d8d60f096b0f4e069dc8b2409811f5ac"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:496px;max-width:100%;flex-direction:column"><img style="object-fit:contain" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F903b942f-49b7-4953-923c-55fb6d520bd5%2FUntitled.png?table=block&amp;id=d8d60f09-6b0f-4e06-9dc8-b2409811f5ac&amp;cache=v2" loading="lazy" alt="DFA" decoding="async"/><figcaption class="notion-asset-caption">DFA</figcaption></div></figure></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-323df8cbfe25433eba3d392eb38f2e8b">可以看到每一个 DFA 的状态都等同于某一时刻 NFA 状态列表，所以 DFA 在最坏情况下，空间复杂度 <span role="button" tabindex="0" class="notion-equation notion-equation-inline"><span></span></span>，也会在构建阶段消耗更多时间。同时没有了回溯，整个匹配时间就是字符串长度，复杂度为 <span role="button" tabindex="0" class="notion-equation notion-equation-inline"><span></span></span>。为了保证 DFA 的空间消耗，一般都会额外对构建出的 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://en.wikipedia.org/wiki/DFA_minimization">DFA 做简化</a>，减少图的大小。</div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-ddeb7f785eb14d7b868a6917822d6ab5" data-id="ddeb7f785eb14d7b868a6917822d6ab5"><span><div id="ddeb7f785eb14d7b868a6917822d6ab5" class="notion-header-anchor"></div><a class="notion-hash-link" href="#ddeb7f785eb14d7b868a6917822d6ab5" title="为什么主流编程语言这么慢？"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">为什么主流编程语言这么慢？</span></span></h4><div class="notion-text notion-block-556cfad12c9a4e90bc6a5aa982a85b89">说来有趣，Thompson NFA 构造法应该是编译原理的基础概念，DFA 方法从概念上也是比较简单，为什么当前的主流语言没有采用，反而采用了一个带有回溯的、效果远逊的版本？</div><div class="notion-text notion-block-4b68cbc5f2e14f5bbff6d29e174812aa">经过一番冲浪搜索，简单概括我找到的结论：<b>历史的局限</b>。</div><blockquote class="notion-quote notion-block-f0186a0b42784296a704da19665a61ff"><em>While writing the text editor sam [6] in the early 1980s, Rob Pike wrote a new regular expression implementation, which Dave Presotto extracted into a library that appeared in the Eighth Edition. Pike&#x27;s implementation incorporated submatch tracking into an efficient NFA simulation but, like the rest of the Eighth Edition source, was not widely distributed. Pike himself did not realize that his technique was anything new. </em><span class="notion-red"><em>Henry Spencer reimplemented the Eighth Edition library interface from scratch, but using backtracking, and released his implementation into the public domain.</em></span><em> </em><span class="notion-red"><em>It became very widely used, eventually serving as the basis for the slow regular expression implementations mentioned earlier: Perl, PCRE, Python, and so on.</em></span></blockquote><div class="notion-text notion-block-7f091f2eb6e74c62bbd877d83c1d92a8">可以从上文得知，正则匹配的实现首先需要兼容原来的使用方式，而当时开发者并未了解 NFA 模拟方法，而是自己从零实现了一个回溯方法，并且被广泛地传播开了。即使这个实现很慢，但是由于已经被大规模采用，且能满足大多数的使用场景，各个主流语言也没有替换它。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-6e320bb2c4334d31af6172db35ede111" data-id="6e320bb2c4334d31af6172db35ede111"><span><div id="6e320bb2c4334d31af6172db35ede111" class="notion-header-anchor"></div><a class="notion-hash-link" href="#6e320bb2c4334d31af6172db35ede111" title="正面对抗 Evil Regex"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">正面对抗 Evil Regex</span></span></h3><div class="notion-text notion-block-ed1e3a4cebbf4d4689dc02e9e576134b">既然当前主流语言的实现肯定会存在性能陷阱，我们是否有办法检测邪恶正则呢？答案是肯定的。</div><div class="notion-text notion-block-787a7eab4c8143eea147b25f34efb1c4">在社区里有不少相关项目，例如：<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/doyensec/regexploit">regexploit</a> 、<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/olivo/redos-detector">redos-detector</a> 、<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/davisjam/vuln-regex-detector">vuln-regex-detector</a> 等，它们都可以扫描出有风险的正则，就像这样：</div><pre class="notion-code language-shell"><code class="language-shell">$ echo <span class="token string">"(a+)+s"</span> <span class="token operator">|</span> regexploit
<span class="token literal-property property">Pattern</span><span class="token operator">:</span> <span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token punctuation">)</span><span class="token operator">+</span>s
<span class="token operator">--</span><span class="token operator">-</span>
<span class="token function">Redos</span><span class="token punctuation">(</span>starriness<span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">,</span> prefix_sequence<span class="token operator">=</span><span class="token constant">SEQ</span><span class="token punctuation">{</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> redos_sequence<span class="token operator">=</span><span class="token constant">SEQ</span><span class="token punctuation">{</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">}</span> <span class="token punctuation">[</span>s<span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> repeated_character<span class="token operator">=</span><span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">,</span> killer<span class="token operator">=</span>None<span class="token punctuation">)</span>
Worst<span class="token operator">-</span><span class="token keyword">case</span> <span class="token literal-property property">complexity</span><span class="token operator">:</span> <span class="token number">11</span> <span class="token function">⭐⭐⭐⭐⭐⭐⭐⭐⭐⭐</span> <span class="token punctuation">(</span>exponential<span class="token punctuation">)</span>
Repeated character<span class="token operator">:</span> <span class="token punctuation">[</span>a<span class="token punctuation">]</span>
<span class="token literal-property property">Example</span><span class="token operator">:</span> <span class="token string">'a'</span> <span class="token operator">*</span> <span class="token number">3456</span></code></pre><div class="notion-text notion-block-1e6c9924ca8148c2adbe7335b9bf6c62">但是它们局限于静态的正则扫描，对于我们开发者而言，静态防御并不能完全清除风险。更好的思路是直接替换语言的默认实现。以 Python 举例，我们也找到了一些替换库：</div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-8a414c655d0842eb9a242a88266b28e7" data-id="8a414c655d0842eb9a242a88266b28e7"><span><div id="8a414c655d0842eb9a242a88266b28e7" class="notion-header-anchor"></div><a class="notion-hash-link" href="#8a414c655d0842eb9a242a88266b28e7" title="pyre2"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">pyre2</span></span></h4><pre class="notion-code language-shell"><code class="language-shell">pip install pyre2</code></pre><div class="notion-text notion-block-efda542abaf5447f92a67e6709475006">来自 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/google/re2/">Google re2</a> 模块的 Python 封装 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/facebook/pyre2">pyre2</a>，使用了 DFA 的构造方式。可以替换原生 <code class="notion-inline-code">re</code> 模块，大多数场景都可以得到速度的稳步提升，不存在性能陷阱。</div><div class="notion-text notion-block-289140745a58440b96faea1ec82f6395">但对于 DFA 模拟来说，都是自古华山一条道，比如 <code class="notion-inline-code">(?P=&lt;name&gt;)</code> 这样的属于 <code class="notion-inline-code">backreference</code> 的捕获组语法就无法支持了。</div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-12c4a78bedf14dcf8397441db47e3f36" data-id="12c4a78bedf14dcf8397441db47e3f36"><span><div id="12c4a78bedf14dcf8397441db47e3f36" class="notion-header-anchor"></div><a class="notion-hash-link" href="#12c4a78bedf14dcf8397441db47e3f36" title="regex"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">regex</span></span></h4><pre class="notion-code language-shell"><code class="language-shell">pip install regex</code></pre><div class="notion-text notion-block-1f35e9047a1c4d47a37d67ce17ed1e04"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/mrabarnett/mrab-regex">regex</a> 模块<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/mrabarnett/mrab-regex/issues/136">并未使用 DFA 构造</a>，在完全兼容 <code class="notion-inline-code">re</code> 模块的同时，支持了一些<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/mrabarnett/mrab-regex#old-vs-new-behaviour">新特性</a>。由于实现方案的不同，也没有很明确的文档阐述，尚不清楚它具体的算法（<em>有待进一步从代码层面解读</em>），但是从效果上，它的性能要<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/mrabarnett/mrab-regex/issues/320">略好于原生模块</a>，仅从文中里例子测试看来，也规避了性能陷阱，可以谨慎采用。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-8ef69d8b54184936a684009d1c35948e" data-id="8ef69d8b54184936a684009d1c35948e"><span><div id="8ef69d8b54184936a684009d1c35948e" class="notion-header-anchor"></div><a class="notion-hash-link" href="#8ef69d8b54184936a684009d1c35948e" title="总结"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">总结</span></span></h3><ul class="notion-list notion-list-disc notion-block-4c31a30c7e0e4ba19ea2a53dafd478c5"><li>和很多其他场景一样，程序需要时刻警惕用户的输入，任何不经过校验的内容都可能将程序拖垮。</li></ul><ul class="notion-list notion-list-disc notion-block-18e7ee68eda94a45b67b4c11dffeb5a7"><li>理论和实际存在各种各样的鸿沟，在面临现实场景时，理想的想法落地总是困难的。</li></ul><ul class="notion-list notion-list-disc notion-block-a5f4f5f11c0843a7b1ab7a3cbee60843"><li>原生不代表就是最优秀的。有特殊需求时可以使用社区方案进行替换。</li></ul><div class="notion-blank notion-block-3672e91b6a7c4125b6980f6f543b1536"> </div><div class="notion-text notion-block-b38fb92df2184f5096ca8ac1e6c65b00">参考：</div><ul class="notion-list notion-list-disc notion-block-2d5c165011ab41b7950ff02c9a393e88"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://swtch.com/~rsc/regexp/regexp1.html">https://swtch.com/~rsc/regexp/regexp1.html</a></li></ul><ul class="notion-list notion-list-disc notion-block-67c19c430a1c49d1ac8563f6f162c2ef"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS">https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS</a></li></ul><ul class="notion-list notion-list-disc notion-block-b05ea5bd8ae540baa38b654a5b723fac"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://shivankaul.com/blog/nfa-dfa-and-regexes">https://shivankaul.com/blog/nfa-dfa-and-regexes</a></li></ul><ul class="notion-list notion-list-disc notion-block-0049a5a2d6d54dae964b80639ecb4144"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://arstechnica.com/civis/viewtopic.php?f=20&amp;t=1195549">https://arstechnica.com/civis/viewtopic.php?f=20&amp;t=1195549</a></li></ul><ul class="notion-list notion-list-disc notion-block-237dd0aa005e4059a61b62f30bed7dc0"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://news.ycombinator.com/item?id=466957">https://news.ycombinator.com/item?id=466957</a></li></ul><ul class="notion-list notion-list-disc notion-block-9da5e5cb8a684f21bd2f67051397c140"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://medium.com/swlh/visualizing-thompsons-construction-algorithm-for-nfas-step-by-step-f92ef378581b">https://medium.com/swlh/visualizing-thompsons-construction-algorithm-for-nfas-step-by-step-f92ef378581b</a></li></ul><div class="notion-blank notion-block-3f8d2e743c47466294fb92ded6f58558"> </div></main>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[旧代码拾遗：如何在 Python 代码中修改 DNS 解析]]></title>
        <id>https://next.emergencyexit.xyz//update-dns-in-python</id>
        <link href="https://next.emergencyexit.xyz//update-dns-in-python"/>
        <updated>2022-02-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[旧代码拾遗]]></summary>
        <content type="html"><![CDATA[<main class="notion light-mode notion-page notion-block-a6c3c98f9ef945de9d524baec7327464"><div class="notion-viewport"></div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-38daf52d57c342d4be99642547e69bec" data-id="38daf52d57c342d4be99642547e69bec"><span><div id="38daf52d57c342d4be99642547e69bec" class="notion-header-anchor"></div><a class="notion-hash-link" href="#38daf52d57c342d4be99642547e69bec" title="Why"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Why</span></span></h3><div class="notion-text notion-block-86d81791a3264f1f850f6fb0215f7f8e">我们访问 K8S 的 ApiServer 服务，由于为了保证安全性，证书中签发的域名仅包括 <code class="notion-inline-code">kubernetes</code> 和初始的有限 IP 列表，当 ApiServer 服务的 Master 节点需要被替换时，就无法使用新的节点 IP 访问了。解决的方案就是将 <code class="notion-inline-code">kubernetes</code> 域名和新的 IP 临时绑定，骗过证书校验。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-57a46d1303cc45398d79ae16a961b878" data-id="57a46d1303cc45398d79ae16a961b878"><span><div id="57a46d1303cc45398d79ae16a961b878" class="notion-header-anchor"></div><a class="notion-hash-link" href="#57a46d1303cc45398d79ae16a961b878" title="How？"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">How？</span></span></h3><div class="notion-text notion-block-0134574ed5fc47fdb7044f7ae5305657">废话不多说，直接看代码</div><pre class="notion-code language-python"><code class="language-python"># <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span> coding<span class="token operator">:</span> utf<span class="token operator">-</span><span class="token number">8</span> <span class="token operator">-</span><span class="token operator">*</span><span class="token operator">-</span>
<span class="token keyword">import</span> contextlib
<span class="token keyword">import</span> importlib
<span class="token keyword">import</span> threading
from typing <span class="token keyword">import</span> Callable<span class="token punctuation">,</span> Dict<span class="token punctuation">,</span> Optional

from urllib3<span class="token punctuation">.</span>util <span class="token keyword">import</span> connection


<span class="token keyword">class</span> <span class="token class-name">CustomLocalDnsResolver</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>local<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token string">""</span>"支持线程级自定义 Dns 记录
    <span class="token string">""</span>"

    def <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token literal-property property">dns_map</span><span class="token operator">:</span> Optional<span class="token punctuation">[</span>dict<span class="token punctuation">]</span><span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token operator">:</span>
        # 线程保存各自 dns_map，但是访问入口均为 dns_map
        self<span class="token punctuation">.</span>dns_map <span class="token operator">=</span> dns_map or <span class="token punctuation">{</span><span class="token punctuation">}</span>


def <span class="token function">get_patch_create_connection_with_dns</span><span class="token punctuation">(</span>dns_resolver<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> Callable<span class="token operator">:</span>
    <span class="token string">""</span><span class="token string">"simply get patched create_connection"</span><span class="token string">""</span>

    # 保留原方法
    _orig_create_connection <span class="token operator">=</span> <span class="token function">getattr</span><span class="token punctuation">(</span>importlib<span class="token punctuation">.</span><span class="token function">import_module</span><span class="token punctuation">(</span><span class="token string">'urllib3.util.connection'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'create_connection'</span><span class="token punctuation">)</span>

    def <span class="token function">patched_create_connection</span><span class="token punctuation">(</span>address<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token operator">:</span>
        <span class="token string">""</span><span class="token string">"在 urllib3's create_connection 流程前解析 address"</span><span class="token string">""</span>
        domain<span class="token punctuation">,</span> port <span class="token operator">=</span> address
        # 当 _local_dns<span class="token punctuation">.</span>dns_map 为空，对正常流程无影响
        host <span class="token operator">=</span> dns_resolver<span class="token punctuation">.</span>dns_map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>domain<span class="token punctuation">,</span> domain<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token function">_orig_create_connection</span><span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>

    <span class="token keyword">return</span> patched_create_connection


_local_dns <span class="token operator">=</span> <span class="token function">CustomLocalDnsResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
# patch 全局 create_connection
connection<span class="token punctuation">.</span>create_connection <span class="token operator">=</span> <span class="token function">get_patch_create_connection_with_dns</span><span class="token punctuation">(</span>_local_dns<span class="token punctuation">)</span>


@contextlib<span class="token punctuation">.</span>contextmanager
def <span class="token function">update_local_dns_once</span><span class="token punctuation">(</span>dns_map<span class="token operator">:</span> Dict<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token string">""</span><span class="token string">"一次性修改线程 dns 解析"</span><span class="token string">""</span>
    _local_dns<span class="token punctuation">.</span>dns_map <span class="token operator">=</span> dns_map
    <span class="token keyword">yield</span>
    _local_dns<span class="token punctuation">.</span>dns_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>


# 具体的使用场景
<span class="token keyword">with</span> <span class="token function">update_local_dns_once</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">"kubernetes"</span><span class="token operator">:</span> <span class="token string">"192.168.1.1"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span>
    # 可以在该 context 中请求外部系统</code></pre><div class="notion-blank notion-block-d6c4207d6e5f406d98f2f7f01373402a"> </div><div class="notion-blank notion-block-1798e8cd901544068cc7e842253d62bc"> </div></main>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[小记：如何将 Logstash7 镜像替换为 KonaJDK]]></title>
        <id>https://next.emergencyexit.xyz//use-konajdk-in-logstash-image</id>
        <link href="https://next.emergencyexit.xyz//use-konajdk-in-logstash-image"/>
        <updated>2021-12-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[随手记录，简单却防遗忘]]></summary>
        <content type="html"><![CDATA[<main class="notion light-mode notion-page notion-block-f7327b98b06a423a8b9f646e5ba2123f"><div class="notion-viewport"></div><div class="notion-blank notion-block-db808c0aadf3437d856ba61c501ddc3f"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-56d00d6fc33c42f993dac1cac2f1192d" data-id="56d00d6fc33c42f993dac1cac2f1192d"><span><div id="56d00d6fc33c42f993dac1cac2f1192d" class="notion-header-anchor"></div><a class="notion-hash-link" href="#56d00d6fc33c42f993dac1cac2f1192d" title="Step 0 预备环境"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Step 0 预备环境</span></span></h3><div class="notion-text notion-block-a6c6802f89cd49ffa227d1412ba85e2e">Rake 是一个由 Ruby 实现的 Make-like 工具，可以用 Ruby 来编排项目任务流程，例如出二进制包、构建镜像等。在 GitHub Logstash 项目的 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/elastic/logstash/blob/main/rakelib/artifacts.rake">rakelib</a> 里找到镜像构建逻辑。</div><div class="notion-text notion-block-e2aa50674a46414493bdf4a5db0a4b63">构建之前，需要保证构建机包含以下工具：</div><ul class="notion-list notion-list-disc notion-block-21edbc015296410cb6d699195fb2c21a"><li>Docker</li></ul><ul class="notion-list notion-list-disc notion-block-b097a4840a8244bb9c6f71c05339decc"><li>GNU Make</li></ul><ul class="notion-list notion-list-disc notion-block-e3e863afff554e338340b7d47028d284"><li>Python 3.5+ with Virtualenv</li></ul><ul class="notion-list notion-list-disc notion-block-ec9f85330613463c8cb3c0baf40783b6"><li>JRuby 9.1+ （实际上 Mac 自带 Ruby 也是可行的）</li></ul><div class="notion-text notion-block-481102291cd947a7b7755166ccfb5104">然后将 Logstash 项目 clone 到本地，并切换到预期修改的版本：</div><pre class="notion-code language-bash"><code class="language-bash">git checkout v7<span class="token punctuation">.</span><span class="token number">16.2</span></code></pre><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-77fd59e96d934fc29d55c6ffb4e0fb71" data-id="77fd59e96d934fc29d55c6ffb4e0fb71"><span><div id="77fd59e96d934fc29d55c6ffb4e0fb71" class="notion-header-anchor"></div><a class="notion-hash-link" href="#77fd59e96d934fc29d55c6ffb4e0fb71" title="Step 1 精简构建步骤"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Step 1 精简构建步骤</span></span></h3><div class="notion-text notion-block-71b0a3dec2a74de8a3cfddbcd89f377b">构建步骤中，默认会包括 Windows\MacOS 以及 Arm 的构建，如果你并不需要这些平台，可以如下手动修改构建步骤，能够大大加快你的构建速度：</div><pre class="notion-code language-ruby"><code class="language-ruby"># <span class="token function">create_archive_pack</span><span class="token punctuation">(</span>license_details<span class="token punctuation">,</span> <span class="token string">"x86_64"</span><span class="token punctuation">,</span> <span class="token string">"linux"</span><span class="token punctuation">,</span> <span class="token string">"windows"</span><span class="token punctuation">,</span> <span class="token string">"darwin"</span><span class="token punctuation">)</span>
<span class="token function">create_archive_pack</span><span class="token punctuation">(</span>license_details<span class="token punctuation">,</span> <span class="token string">"x86_64"</span><span class="token punctuation">,</span> <span class="token string">"linux"</span><span class="token punctuation">)</span>
# <span class="token function">create_archive_pack</span><span class="token punctuation">(</span>license_details<span class="token punctuation">,</span> <span class="token string">"arm64"</span><span class="token punctuation">,</span> <span class="token string">"linux"</span><span class="token punctuation">)</span></code></pre><figcaption class="notion-asset-caption"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/elastic/logstash/blob/2cf6675f538247be091df9d31cc455538f029a07/rakelib/artifacts.rake#L142">artifacts.rake</a></figcaption><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-912a6e2fab744f6e8b0f4b434806f701" data-id="912a6e2fab744f6e8b0f4b434806f701"><span><div id="912a6e2fab744f6e8b0f4b434806f701" class="notion-header-anchor"></div><a class="notion-hash-link" href="#912a6e2fab744f6e8b0f4b434806f701" title="Step 2 修改 Python 版本"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Step 2 修改 Python 版本</span></span></h3><div class="notion-text notion-block-2adb74e716a2480ea35f6f3b07850e98">如果你不想为了构建镜像额外下载其他 Python 版本，可以手动修改 Makefile</div><pre class="notion-code language-makefile"><code class="language-makefile"># <span class="token constant">PY_VERSION</span> <span class="token operator">?</span><span class="token operator">=</span> <span class="token number">3.6</span><span class="token number">.13</span>
# <span class="token operator">=></span>
<span class="token constant">PY_VERSION</span> <span class="token operator">?</span><span class="token operator">=</span> <span class="token number">3.6</span><span class="token number">.7</span></code></pre><figcaption class="notion-asset-caption"><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/elastic/logstash/blob/2cf6675f538247be091df9d31cc455538f029a07/docker/Makefile#L3">Makefile</a></figcaption><div class="notion-text notion-block-bad578fd54a34a018be8aa73abcb9e3b">理论上保证 Python 版本大于 3.5 即可。</div><div class="notion-blank notion-block-53071725dbcc47bbacf124bd49fbb662"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-2c3c96643334464f9ebc93d14cea61c2" data-id="2c3c96643334464f9ebc93d14cea61c2"><span><div id="2c3c96643334464f9ebc93d14cea61c2" class="notion-header-anchor"></div><a class="notion-hash-link" href="#2c3c96643334464f9ebc93d14cea61c2" title="Step 3 指定 JDK 版本"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Step 3 指定 JDK 版本</span></span></h3><div class="notion-text notion-block-9fc57152348c48088f81bdd78a10d2f1">如标题所示，我们的目标是将 Logstash 镜像里的 OpenJDK 替换成 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/Tencent/TencentKona-11">KonaJDK</a>。构建时手动指定 JDK 地址即可</div><pre class="notion-code language-bash"><code class="language-bash"><span class="token constant">JDK_URL</span><span class="token operator">=</span>https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>Tencent<span class="token operator">/</span>TencentKona<span class="token operator">-</span><span class="token number">11</span><span class="token operator">/</span>releases<span class="token operator">/</span>download<span class="token operator">/</span>kona11<span class="token punctuation">.</span><span class="token number">0.13</span><span class="token operator">-</span>fiber<span class="token operator">/</span>TencentKona<span class="token operator">-</span><span class="token number">11.0</span><span class="token number">.13</span><span class="token punctuation">.</span>b1_jdk_fiber_linux<span class="token operator">-</span>x86_64<span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz rake artifact<span class="token operator">:</span>docker</code></pre><div class="notion-blank notion-block-26ebe1cc373b40a2af4165805f5c18f8"> </div><div class="notion-text notion-block-bf0dcb10928d45a9a50662a45d504b34">等待构建，大功告成 xD</div><div class="notion-blank notion-block-46d2d7251c9f4e1398e84f133d1796db"> </div></main>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[用 GraphQL 查询你的 Django 应用]]></title>
        <id>https://next.emergencyexit.xyz//use-graphql-with-django</id>
        <link href="https://next.emergencyexit.xyz//use-graphql-with-django"/>
        <updated>2021-11-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[强是挺强，但适用场景依旧有限]]></summary>
        <content type="html"><![CDATA[<main class="notion light-mode notion-page notion-block-9a08823eeec64cc09ec8890cb0650aa7"><div class="notion-viewport"></div><div class="notion-table-of-contents notion-gray notion-block-7cbbabf5b06b4f1b832fe664023382bd"><a href="#6f80cc74a749486d8ad82ae7a1aea572" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:0">什么是 GraphQL ？</span></a><a href="#5041039329414c21aaebd26612c47d03" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:0">它有什么有意思的特性</span></a><a href="#5be2fa55f8854b9dae359baadc092859" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:24px">Fragments</span></a><a href="#51381a94e35a4a2790d130b10e46dbd2" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:24px">Directives</span></a><a href="#f7baf2676dcd4b14a48a5960996fbfbb" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:0">和 REST 相比较有什么优势和劣势？</span></a><a href="#8b386b3470f74f38862ae13b9c8ee6e9" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:24px">TLDR</span></a><a href="#1d318237ebd04d408d49f9a6ac2982d0" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:24px">vs 扩展的 REST 协议</span></a><a href="#3db8daa2fcb0409baa596fd5472b9ff3" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:0">什么是 GraphQL 客户端?</span></a><a href="#499a5d133c9b493e946a692b0e21a062" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:0">服务端落地：GraphQL → Django</span></a><a href="#8c904f70489a4268a7b5c8f4ca2d51e6" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:24px">支持 Relay</span></a><a href="#3d929743493649a6a43da55924cdfa5e" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:24px">引入 graphene-django-extras</span></a><a href="#0068853173e54e1bacc12aa21d51205d" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:24px">鉴权</span></a><a href="#10f53459be3844c7a1355a1ed5bd63b9" class="notion-table-of-contents-item"><span class="notion-table-of-contents-item-body" style="display:inline-block;margin-left:0">总结</span></a></div><div class="notion-callout notion-gray_background_co notion-block-2986488d269c41b787a73096363557d2"><span class="notion-page-icon" role="img" aria-label="😶‍🌫️">😶‍🌫️</span><div class="notion-callout-text">全文以后端开发视角写作，部分涉及到前端开发的介绍可能存在错误或者不准确，欢迎在评论区斧正</div></div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-6f80cc74a749486d8ad82ae7a1aea572" data-id="6f80cc74a749486d8ad82ae7a1aea572"><span><div id="6f80cc74a749486d8ad82ae7a1aea572" class="notion-header-anchor"></div><a class="notion-hash-link" href="#6f80cc74a749486d8ad82ae7a1aea572" title="什么是 GraphQL ？"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">什么是 GraphQL ？</span></span></h3><div class="notion-text notion-block-9ce07e2a85a94064abc0f2e22d9324cf">先来看看 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://zh.wikipedia.org/wiki/GraphQL">wikipedia</a>：</div><blockquote class="notion-quote notion-block-5e3b15ce4caa4fc9a4bdf513a497a202">GraphQL 是一个开源的，面向 API 而创造出来的数据查询操作语言以及相应的服务端运行环境。</blockquote><div class="notion-text notion-block-46ff6eaaa64045318192214e00ed3b7a">GraphQL 首先是一种查询语言，它定义了一种通用的数据查询方式，可以理解为一种通用的 SQL，只不过前者面向抽象的数据集，后者往往是具体的关系型数据库。</div><div class="notion-text notion-block-2cbc564d204a449faf4f770a57101a88">其次，它还包括一种服务端运行时，用于实现查询语句解析、数据类型定义。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-5041039329414c21aaebd26612c47d03" data-id="5041039329414c21aaebd26612c47d03"><span><div id="5041039329414c21aaebd26612c47d03" class="notion-header-anchor"></div><a class="notion-hash-link" href="#5041039329414c21aaebd26612c47d03" title="它有什么有意思的特性"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">它有什么有意思的特性</span></span></h3><div class="notion-text notion-block-78e75c481cda4072b1e02f6cd843e186">仅从后端开发视角，列举几个觉得有意思的特性</div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-5be2fa55f8854b9dae359baadc092859" data-id="5be2fa55f8854b9dae359baadc092859"><span><div id="5be2fa55f8854b9dae359baadc092859" class="notion-header-anchor"></div><a class="notion-hash-link" href="#5be2fa55f8854b9dae359baadc092859" title="Fragments"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Fragments</span></span></h4><pre class="notion-code language-graphql"><code class="language-graphql">query <span class="token function">HeroComparison</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">$first</span><span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token number">3</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">leftComparison</span><span class="token operator">:</span> <span class="token function">hero</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">episode</span><span class="token operator">:</span> <span class="token constant">EMPIRE</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>comparisonFields
  <span class="token punctuation">}</span>
  <span class="token literal-property property">rightComparison</span><span class="token operator">:</span> <span class="token function">hero</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">episode</span><span class="token operator">:</span> <span class="token constant">JEDI</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>comparisonFields
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

fragment comparisonFields on Character <span class="token punctuation">{</span>
  name
  <span class="token function">friendsConnection</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">first</span><span class="token operator">:</span> $first</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    totalCount
    edges <span class="token punctuation">{</span>
      node <span class="token punctuation">{</span>
        name
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre><div class="notion-text notion-block-c04278bd4ae44492a254104fde035325">使用 Fragment 复用查询内容，并且可以定义参数</div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-51381a94e35a4a2790d130b10e46dbd2" data-id="51381a94e35a4a2790d130b10e46dbd2"><span><div id="51381a94e35a4a2790d130b10e46dbd2" class="notion-header-anchor"></div><a class="notion-hash-link" href="#51381a94e35a4a2790d130b10e46dbd2" title="Directives"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Directives</span></span></h4><pre class="notion-code language-graphql"><code class="language-graphql">query <span class="token function">Hero</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">$episode</span><span class="token operator">:</span> Episode<span class="token punctuation">,</span> <span class="token literal-property property">$withFriends</span><span class="token operator">:</span> Boolean<span class="token operator">!</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">hero</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">episode</span><span class="token operator">:</span> $episode</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    name
    friends @<span class="token function">include</span><span class="token punctuation">(</span><span class="token parameter"><span class="token keyword">if</span><span class="token operator">:</span> $withFriends</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      name
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

# variables
<span class="token punctuation">{</span>
  <span class="token string-property property">"episode"</span><span class="token operator">:</span> <span class="token string">"JEDI"</span><span class="token punctuation">,</span>
  <span class="token string-property property">"withFriends"</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">}</span></code></pre><div class="notion-text notion-block-50804a4e6c7d45c1a89613654cb0eedd">可以通过通用的两种指令来控制一些字段的返回：</div><ul class="notion-list notion-list-disc notion-block-b6b987cd363943509af04767f54d1795"><li> <code class="notion-inline-code">@include(if: Boolean)</code> </li></ul><ul class="notion-list notion-list-disc notion-block-9d6988932833425689d6246356037357"><li> <code class="notion-inline-code">@skip(if: Boolean)</code> </li></ul><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-f7baf2676dcd4b14a48a5960996fbfbb" data-id="f7baf2676dcd4b14a48a5960996fbfbb"><span><div id="f7baf2676dcd4b14a48a5960996fbfbb" class="notion-header-anchor"></div><a class="notion-hash-link" href="#f7baf2676dcd4b14a48a5960996fbfbb" title="和 REST 相比较有什么优势和劣势？"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">和 REST 相比较有什么优势和劣势？</span></span></h3><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-8b386b3470f74f38862ae13b9c8ee6e9" data-id="8b386b3470f74f38862ae13b9c8ee6e9"><span><div id="8b386b3470f74f38862ae13b9c8ee6e9" class="notion-header-anchor"></div><a class="notion-hash-link" href="#8b386b3470f74f38862ae13b9c8ee6e9" title="TLDR"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">TLDR</span></span></h4><div class="notion-text notion-block-b286d02d551a49ceb9c46c7736257409">REST 更多是从 HTTP 协议出发的一种约定协议，因为受制于 HTTP 协议本身的设计，在<b>表达能力</b>上是弱于<b>作为查询语言</b>的 GraphQL 的。</div><div class="notion-text notion-block-a88e97e928ae41ab81936449989916a6">同时，REST 通常都是由后端开发者主动封装，而 GraphQL 则是由前端主动拼装。</div><div class="notion-text notion-block-865d80be70cf4e4aaacde0d426f1e966">所以如果面对的场景是<span class="notion-teal">前端需求复杂而多变，GraphQL 肯定比 REST 更适合快速迭代。</span></div><div class="notion-text notion-block-d59f255d52314c30b7292fcf4312e374">也正因此，GraphQL 在实现上更加繁复，所以<span class="notion-pink">面对 API 数量少、需求不会轻易的场景时，REST 反而是更适合的技术选型。</span></div><div class="notion-blank notion-block-dd6dda57e33e4cc4a158fe795567d923"> </div><div class="notion-text notion-block-bae7469dcdf3408cab30219494171505"><em>作为后端开发，学习和使用 GraphQL 的动力，更多是</em><em><b>想将自己从 CRUD 的泥沼中拯救出来，</b></em><em>将更多的精力放在其他更重要的技术上。</em></div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-1d318237ebd04d408d49f9a6ac2982d0" data-id="1d318237ebd04d408d49f9a6ac2982d0"><span><div id="1d318237ebd04d408d49f9a6ac2982d0" class="notion-header-anchor"></div><a class="notion-hash-link" href="#1d318237ebd04d408d49f9a6ac2982d0" title="vs 扩展的 REST 协议"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">vs 扩展的 REST 协议</span></span></h4><div class="notion-text notion-block-9b5c1dee8abf461f85b0cc6ab7187b8c">（此小节中图片拷贝自<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.howtographql.com/basics/1-graphql-is-th">网络</a>，懒得画）</div><div class="notion-text notion-block-9f3b0d45de334ab4bbd7ee7edf38e4ff">和 REST 一样，GraphQL 并不是什么开发框架，它只是定义了一种通用型查询的 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://en.wikipedia.org/wiki/Domain-specific_language">DSL</a>。</div><div class="notion-text notion-block-9a384f67fe30477f978ff21b22e36de9">而使用 REST 协议进行资源拉取，我们总是会面临一些实际的问题，而 GraphQL 可以在一定程度上解决。那么肯定会有同学在想，REST 是非常灵活的，完全可以通过自建一个查询语法，弥补上述的 REST 缺陷，何必要另外引入 GraphQL 徒增复杂度呢。</div><div class="notion-text notion-block-016edec76cf34328ac821ba4bc4268e3">说的没错，所以我们在阐述这些问题的时候，也会附上我们当前基于 REST 的解决方案。</div><div class="notion-blank notion-block-9151f0fa7aa04512bd8567f9b597b835"> </div><div class="notion-text notion-block-86523c26bb6f4ca881988768cfd86c64"><b>Overfetching：</b></div><div class="notion-text notion-block-261e9041ab2347b7aa5f4f2ac4bf7283">假如我们定义了一个 <code class="notion-inline-code">/comments</code> 的 API，输出评论列表。以 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.django-rest-framework.org/">django-rest-framework</a> 为例，我们都会定义一个 <code class="notion-inline-code">Serializer</code> 来声明它的输入和输出。</div><pre class="notion-code language-python"><code class="language-python">from rest_framework <span class="token keyword">import</span> serializers

<span class="token keyword">class</span> <span class="token class-name">CommentSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>Serializer<span class="token punctuation">)</span><span class="token operator">:</span>
    email <span class="token operator">=</span> serializers<span class="token punctuation">.</span><span class="token function">EmailField</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    content <span class="token operator">=</span> serializers<span class="token punctuation">.</span><span class="token function">CharField</span><span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>
    logo <span class="token operator">=</span> serializer<span class="token punctuation">.</span><span class="token function">ImageField</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token operator">...</span><span class="token punctuation">(</span>省略数不清的字段<span class="token punctuation">)</span>
    created <span class="token operator">=</span> serializers<span class="token punctuation">.</span><span class="token function">DateTimeField</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    ip_from <span class="token operator">=</span> serializers<span class="token punctuation">.</span><span class="token function">IPAddressField</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><div class="notion-text notion-block-9243ba0ad276413398efd52a86e73c76">看起来符合常理，它可以轻松满足大多数评论列表的需求。但是也许某一天，我们需要一个评论的精简列表的 API，当前返回内容中，除了 <code class="notion-inline-code">content</code> 以外的其他字段都变成多余了，那么后端开发需要重新定一个 <code class="notion-inline-code">MinimalCommentSerializer</code> 来满足新的需求。</div><div class="notion-text notion-block-c1041cb777b346d89717b6b8227d5719">在 REST 基础中，我们增加了 <code class="notion-inline-code">fields</code> 参数，并在 <code class="notion-inline-code">DRF Serializer</code> 里做了<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/TencentBlueKing/bk-user/blob/8c633e0a3821beb839ed120c4514c5733e675862/src/api/bkuser_core/common/viewset.py#L71">特殊处理（你可以点击查看源码）</a>，实现的具体效果：</div><pre class="notion-code language-json"><code class="language-json"># 查询 comment，并限制结果返回字段
<span class="token operator">/</span>api<span class="token operator">/</span>comments<span class="token operator">?</span>fields<span class="token operator">=</span>email<span class="token punctuation">,</span>content

# 返回
<span class="token punctuation">{</span>
  <span class="token string-property property">"results"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string-property property">"email"</span><span class="token operator">:</span> <span class="token string">"foo@bar.com"</span><span class="token punctuation">,</span>
      <span class="token string-property property">"content"</span><span class="token operator">:</span> <span class="token string">"I love this blog, simple and good looking."</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre><div class="notion-text notion-block-f597e7e436cb44f4940b946ac14191db">而如果我们使用 GraphQL，写法上会更自然：</div><pre class="notion-code language-graphql"><code class="language-graphql">query <span class="token punctuation">{</span>
  comment <span class="token punctuation">{</span>
    email
    content
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre><div class="notion-text notion-block-73155088d28a4e6f8b82bf2551ad1a67"><b>Underfetching</b></div><div class="notion-text notion-block-5b93503e6e0c47fa8165bb452f67c8f3">相较于 Overfetching 是获取了过多数据，Underfetching 则是在请求获取的数据不足够满足需求。</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-76d7c8f902c246cba62dfd7a00b5c990"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:720px;max-width:100%;flex-direction:column"><img style="object-fit:contain" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F7396e0b5-7539-4174-992e-c35a8076984e%2FUntitled.png?table=block&amp;id=76d7c8f9-02c2-46cb-a62d-fd7a00b5c990&amp;cache=v2" loading="lazy" alt="传统的 REST 协议" decoding="async"/><figcaption class="notion-asset-caption">传统的 REST 协议</figcaption></div></figure><div class="notion-text notion-block-f20ce9deab744d049c5c529571cf5b0a">假如我们需要获取所有用户维度的评论，我们需要先获取通过 <code class="notion-inline-code">/users</code> 所有用户 id，再使用 id 列表遍历查询 <code class="notion-inline-code">/users/&lt;id&gt;/comments</code> 来获取相关的列表。</div><div class="notion-text notion-block-664a1feb5c8f4030a77f313f8f2c05f0">在 REST 中，为了这个需求我们可能会额外为 <code class="notion-inline-code">/users</code> 增加一个参数 <code class="notion-inline-code">with_comments</code> </div><pre class="notion-code language-json"><code class="language-json"># 查询 users，并限制结果返回字段
<span class="token operator">/</span>api<span class="token operator">/</span>users<span class="token operator">?</span>with_comments<span class="token operator">=</span><span class="token number">1</span>

# 返回
<span class="token punctuation">{</span>
  <span class="token string-property property">"results"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      <span class="token string-property property">"username"</span><span class="token operator">:</span> <span class="token string">"foo"</span><span class="token punctuation">,</span>
      <span class="token string-property property">"telephone"</span><span class="token operator">:</span> <span class="token string">"12345"</span><span class="token punctuation">,</span>
      <span class="token string-property property">"comments"</span><span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token string-property property">"email"</span><span class="token operator">:</span> <span class="token string">"foo@bar.com"</span><span class="token punctuation">,</span>
          <span class="token string-property property">"content"</span><span class="token operator">:</span> <span class="token string">"I love this blog, simple and good looking."</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">]</span>
<span class="token punctuation">}</span></code></pre><div class="notion-blank notion-block-d002648bd6984cb1ac8c6a0951653437"> </div><div class="notion-text notion-block-511e89a1906b47068da530351636a8ab">相较于自定义的 REST 协议，使用 GraphQL 可以更简单：</div><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-801be6ddb7bf4afd988363ef9ea359ea"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:624px;max-width:100%;flex-direction:column"><img style="object-fit:contain" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc730795a-8b87-497e-a6c8-38c4c29f310a%2FUntitled.png?table=block&amp;id=801be6dd-b7bf-4afd-9883-63ef9ea359ea&amp;cache=v2" loading="lazy" alt="使用 GraphQL，只需要一次请求" decoding="async"/><figcaption class="notion-asset-caption">使用 GraphQL，只需要一次请求</figcaption></div></figure><hr class="notion-hr notion-block-a7cc3850d7d34e9394559e3c484535a8"/><div class="notion-blank notion-block-ae2e1ab9de4445e9af25da3b4283ed30"> </div><div class="notion-text notion-block-e5388855af4c4978ab5d79d928a68fac">相信通过上面的例子，我们可以清晰地看出，相较于 GraphQL ，基于 REST 扩展协议存在这些问题：</div><ul class="notion-list notion-list-disc notion-block-0c2d157b66104281b7465d60c317263c"><li>不够通用，用户有额外的学习成本，增加了额外的文档负担。</li></ul><ul class="notion-list notion-list-disc notion-block-bf511966e9b04e6f9565a4435370aaf7"><li>基于 REST ，单个请求只能针对单个对象进行描述。需要等待需求沉淀，由后端主动封装，迭代节奏会更慢。</li></ul><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-3db8daa2fcb0409baa596fd5472b9ff3" data-id="3db8daa2fcb0409baa596fd5472b9ff3"><span><div id="3db8daa2fcb0409baa596fd5472b9ff3" class="notion-header-anchor"></div><a class="notion-hash-link" href="#3db8daa2fcb0409baa596fd5472b9ff3" title="什么是 GraphQL 客户端?"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">什么是 GraphQL 客户端?</span></span></h3><div class="notion-text notion-block-b271423a2db348a9a08562e982457465">我们主要聚焦于 GraphQL 服务端提供，但是也需要先看一下所谓的客户端究竟做了什么。</div><div class="notion-text notion-block-e4ae6016eb264be39a05804c3bd07f25">简单来说，要想在原生 Javascript 中直接使用 GraphQL 并不是一件特别容易的事，需要一些库来协助拉取和管理 GraphQL 数据。</div><div class="notion-text notion-block-3114c568468f4b9cb5b95fe9120d51dd">相较于原生的 GraphQL ，客户端主要解决了几件事情：</div><ul class="notion-list notion-list-disc notion-block-2729ac7032e44245a0b78c928929cfda"><li>客户端数据拉取缓存问题（包括缓存一致性、更新缓存等）</li></ul><ul class="notion-list notion-list-disc notion-block-f3841eb2487b404d8002ecfebcd4e44b"><li>数据分页、声明式数据获取</li></ul><ul class="notion-list notion-list-disc notion-block-dd027b39a3d647529443d0b0220299df"><li>...</li></ul><div class="notion-text notion-block-5b0213aea8b443078ff3c6d9eb1455b5">主流的客户端框架主要有两种—— <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://relay.dev/">Relay</a> 和 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.apollographql.com/">Apollo</a> ，我们仅从有限的角度来看下二者的异同：</div><div class="notion-collection notion-block-79eac296c4544b138687c18a99776607"><div class="notion-collection-header" style="padding-left:96px;padding-right:96px"><div class="notion-collection-header-title">Relay vs Apollo</div></div><div class="notion-table" style="width:1024px;max-width:1024px"><div class="notion-table-view" style="padding-left:96px;padding-right:96px"><div class="notion-table-header"><div class="notion-table-header-inner"><div class="notion-table-th"><div class="notion-table-view-header-cell" style="width:232.66949462890625px"><div class="notion-table-view-header-cell-inner"><div class="notion-collection-column-title"><svg viewBox="0 0 14 14" class="notion-collection-column-title-icon"><path d="M7.74 8.697a.81.81 0 01.073.308.894.894 0 01-.9.888.867.867 0 01-.825-.592l-.333-.961H2.058l-.333.961a.882.882 0 01-.838.592A.884.884 0 010 9.005c0-.11.025-.222.062-.308l2.403-6.211c.222-.58.776-.986 1.442-.986.653 0 1.22.407 1.442.986l2.39 6.211zM2.6 6.824h2.613L3.907 3.102 2.6 6.824zm8.8-3.118c1.355 0 2.6.542 2.6 2.255V9.08a.8.8 0 01-.789.814.797.797 0 01-.788-.703c-.395.468-1.097.764-1.874.764-.949 0-2.07-.64-2.07-1.972 0-1.392 1.121-1.897 2.07-1.897.789 0 1.491.246 1.886.727v-.826c0-.604-.518-.998-1.306-.998-.469 0-.888.123-1.32.394a.64.64 0 01-.307.086.602.602 0 01-.592-.604c0-.221.123-.419.284-.517a3.963 3.963 0 012.206-.641zm-.222 5.188c.505 0 .998-.172 1.257-.517v-.74c-.259-.345-.752-.517-1.257-.517-.616 0-1.122.332-1.122.9 0 .554.506.874 1.122.874zM.656 11.125h12.688a.656.656 0 110 1.313H.656a.656.656 0 110-1.313z"></path></svg><div class="notion-collection-column-title-body"></div></div></div></div></div><div class="notion-table-th"><div class="notion-table-view-header-cell" style="width:232.66949462890625px"><div class="notion-table-view-header-cell-inner"><div class="notion-collection-column-title"><svg viewBox="0 0 14 14" class="notion-collection-column-title-icon"><path d="M7 4.568a.5.5 0 00-.5-.5h-6a.5.5 0 00-.5.5v1.046a.5.5 0 00.5.5h6a.5.5 0 00.5-.5V4.568zM.5 1a.5.5 0 00-.5.5v1.045a.5.5 0 00.5.5h12a.5.5 0 00.5-.5V1.5a.5.5 0 00-.5-.5H.5zM0 8.682a.5.5 0 00.5.5h11a.5.5 0 00.5-.5V7.636a.5.5 0 00-.5-.5H.5a.5.5 0 00-.5.5v1.046zm0 3.068a.5.5 0 00.5.5h9a.5.5 0 00.5-.5v-1.045a.5.5 0 00-.5-.5h-9a.5.5 0 00-.5.5v1.045z"></path></svg><div class="notion-collection-column-title-body">Relay</div></div></div></div></div><div class="notion-table-th"><div class="notion-table-view-header-cell" style="width:369.66949462890625px"><div class="notion-table-view-header-cell-inner"><div class="notion-collection-column-title"><svg viewBox="0 0 14 14" class="notion-collection-column-title-icon"><path d="M7 4.568a.5.5 0 00-.5-.5h-6a.5.5 0 00-.5.5v1.046a.5.5 0 00.5.5h6a.5.5 0 00.5-.5V4.568zM.5 1a.5.5 0 00-.5.5v1.045a.5.5 0 00.5.5h12a.5.5 0 00.5-.5V1.5a.5.5 0 00-.5-.5H.5zM0 8.682a.5.5 0 00.5.5h11a.5.5 0 00.5-.5V7.636a.5.5 0 00-.5-.5H.5a.5.5 0 00-.5.5v1.046zm0 3.068a.5.5 0 00.5.5h9a.5.5 0 00.5-.5v-1.045a.5.5 0 00-.5-.5h-9a.5.5 0 00-.5.5v1.045z"></path></svg><div class="notion-collection-column-title-body">Apollo</div></div></div></div></div></div></div><div class="notion-table-header-placeholder"></div><div class="notion-table-body"><div class="notion-table-row"><div class="notion-table-cell notion-table-cell-title" style="width:232.66949462890625px"><span class="notion-property notion-property-title"><a class="notion-page-link" href="https://www.notion.so/bc1b723e68814b8db570eaa51d4dd328"><span class="notion-page-title"><svg class="notion-page-title-icon notion-page-icon" alt="框架支持" viewBox="0 0 30 30" width="16"><path d="M16,1H4v28h22V11L16,1z M16,3.828L23.172,11H16V3.828z M24,27H6V3h8v10h10V27z M8,17h14v-2H8V17z M8,21h14v-2H8V21z M8,25h14v-2H8V25z"></path></svg><span class="notion-page-title-text">框架支持</span></span></a></span></div><div class="notion-table-cell notion-table-cell-text" style="width:232.66949462890625px"><span class="notion-property notion-property-text">仅支持 React, React Native</span></div><div class="notion-table-cell notion-table-cell-text" style="width:369.66949462890625px"><span class="notion-property notion-property-text">无框架限定</span></div></div><div class="notion-table-row"><div class="notion-table-cell notion-table-cell-title" style="width:232.66949462890625px"><span class="notion-property notion-property-title"><a class="notion-page-link" href="https://www.notion.so/574b8c14d70949388afad8250db9a9ee"><span class="notion-page-title"><svg class="notion-page-title-icon notion-page-icon" alt="GraphQL API" viewBox="0 0 30 30" width="16"><path d="M16,1H4v28h22V11L16,1z M16,3.828L23.172,11H16V3.828z M24,27H6V3h8v10h10V27z M8,17h14v-2H8V17z M8,21h14v-2H8V21z M8,25h14v-2H8V25z"></path></svg><span class="notion-page-title-text">GraphQL API</span></span></a></span></div><div class="notion-table-cell notion-table-cell-text" style="width:232.66949462890625px"><span class="notion-property notion-property-text">需要特定的 Schema 支持</span></div><div class="notion-table-cell notion-table-cell-text" style="width:369.66949462890625px"><span class="notion-property notion-property-text">无需特定的 Schema 支持</span></div></div><div class="notion-table-row"><div class="notion-table-cell notion-table-cell-title" style="width:232.66949462890625px"><span class="notion-property notion-property-title"><a class="notion-page-link" href="https://www.notion.so/c0029db1fe0c44948186e6eb55c57632"><span class="notion-page-title"><svg class="notion-page-title-icon notion-page-icon" alt="学习成本" viewBox="0 0 30 30" width="16"><path d="M16,1H4v28h22V11L16,1z M16,3.828L23.172,11H16V3.828z M24,27H6V3h8v10h10V27z M8,17h14v-2H8V17z M8,21h14v-2H8V21z M8,25h14v-2H8V25z"></path></svg><span class="notion-page-title-text">学习成本</span></span></a></span></div><div class="notion-table-cell notion-table-cell-text" style="width:232.66949462890625px"><span class="notion-property notion-property-text">较高</span></div><div class="notion-table-cell notion-table-cell-text" style="width:369.66949462890625px"><span class="notion-property notion-property-text">较低</span></div></div><div class="notion-table-row"><div class="notion-table-cell notion-table-cell-title" style="width:232.66949462890625px"><span class="notion-property notion-property-title"><a class="notion-page-link" href="https://www.notion.so/5cf89e43953a4289aef7334c7760d81a"><span class="notion-page-title"><svg class="notion-page-title-icon notion-page-icon" alt="生产力" viewBox="0 0 30 30" width="16"><path d="M16,1H4v28h22V11L16,1z M16,3.828L23.172,11H16V3.828z M24,27H6V3h8v10h10V27z M8,17h14v-2H8V17z M8,21h14v-2H8V21z M8,25h14v-2H8V25z"></path></svg><span class="notion-page-title-text">生产力</span></span></a></span></div><div class="notion-table-cell notion-table-cell-text" style="width:232.66949462890625px"><span class="notion-property notion-property-text">高</span></div><div class="notion-table-cell notion-table-cell-text" style="width:369.66949462890625px"><span class="notion-property notion-property-text">较低</span></div></div><div class="notion-table-row"><div class="notion-table-cell notion-table-cell-title" style="width:232.66949462890625px"><span class="notion-property notion-property-title"><a class="notion-page-link" href="https://www.notion.so/d710e6b7a1a2458493f3a4a06adc7f6e"><span class="notion-page-title"><svg class="notion-page-title-icon notion-page-icon" alt="灵活性" viewBox="0 0 30 30" width="16"><path d="M16,1H4v28h22V11L16,1z M16,3.828L23.172,11H16V3.828z M24,27H6V3h8v10h10V27z M8,17h14v-2H8V17z M8,21h14v-2H8V21z M8,25h14v-2H8V25z"></path></svg><span class="notion-page-title-text">灵活性</span></span></a></span></div><div class="notion-table-cell notion-table-cell-text" style="width:232.66949462890625px"><span class="notion-property notion-property-text">固定结构</span></div><div class="notion-table-cell notion-table-cell-text" style="width:369.66949462890625px"><span class="notion-property notion-property-text">较灵活</span></div></div><div class="notion-table-row"><div class="notion-table-cell notion-table-cell-title" style="width:232.66949462890625px"><span class="notion-property notion-property-title"><a class="notion-page-link" href="https://www.notion.so/4e0a6851a331441cbb68fd9b6fa17ffb"><span class="notion-page-title"><svg class="notion-page-title-icon notion-page-icon" alt="是否支持订阅" viewBox="0 0 30 30" width="16"><path d="M16,1H4v28h22V11L16,1z M16,3.828L23.172,11H16V3.828z M24,27H6V3h8v10h10V27z M8,17h14v-2H8V17z M8,21h14v-2H8V21z M8,25h14v-2H8V25z"></path></svg><span class="notion-page-title-text">是否支持订阅</span></span></a></span></div><div class="notion-table-cell notion-table-cell-text" style="width:232.66949462890625px"><span class="notion-property notion-property-text">否</span></div><div class="notion-table-cell notion-table-cell-text" style="width:369.66949462890625px"><span class="notion-property notion-property-text">是</span></div></div></div></div></div></div><div class="notion-text notion-block-25bbafb30a124becb56e2e541cd779e4">简而言之，Realy 更复杂，更能够应对大型应用，Apollo 更轻量，不过需要更多的手工劳动。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-499a5d133c9b493e946a692b0e21a062" data-id="499a5d133c9b493e946a692b0e21a062"><span><div id="499a5d133c9b493e946a692b0e21a062" class="notion-header-anchor"></div><a class="notion-hash-link" href="#499a5d133c9b493e946a692b0e21a062" title="服务端落地：GraphQL → Django"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">服务端落地：GraphQL → Django</span></span></h3><div class="notion-text notion-block-d82aba35a7ee4c7e896c4366b1d5ec5e">想要将 GraphQL 引入现有的项目，我们需要安装两个基础的依赖：</div><ul class="notion-list notion-list-disc notion-block-850425fb270440e89da6348449515cbf"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/graphql-python/graphene-django">graphene-django</a> </li></ul><ul class="notion-list notion-list-disc notion-block-06516dcbe6bf497184297351f2d2b55c"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/carltongibson/django-filter">django-filter</a></li></ul><div class="notion-text notion-block-7f566dd96e93421b9e7552ca098c92db">二者分别负责两部分的工作：</div><ul class="notion-list notion-list-disc notion-block-269531b02e9c47c88da2441c19e7ccc0"><li>Django Model ⇒  Schema</li></ul><ul class="notion-list notion-list-disc notion-block-17baeebedf8c4e94a698faf2a0dfebd4"><li>Query  ⇒  Filter Django Model </li></ul><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-8c904f70489a4268a7b5c8f4ca2d51e6" data-id="8c904f70489a4268a7b5c8f4ca2d51e6"><span><div id="8c904f70489a4268a7b5c8f4ca2d51e6" class="notion-header-anchor"></div><a class="notion-hash-link" href="#8c904f70489a4268a7b5c8f4ca2d51e6" title="支持 Relay"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">支持 Relay</span></span></h4><div class="notion-text notion-block-e80c823d66984b70aef628752f33c177">graphene-django 本身 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://docs.graphene-python.org/projects/django/en/latest/tutorial-relay/">默认支持 Relay</a>，所以你可以很容易地开启</div><pre class="notion-code language-python"><code class="language-python">from graphene <span class="token keyword">import</span> relay
from graphene_django <span class="token keyword">import</span> DjangoObjectType
from ingredients<span class="token punctuation">.</span>models <span class="token keyword">import</span> Category

# Graphene will automatically map the Category model's fields onto the CategoryNode<span class="token punctuation">.</span>
# This is configured <span class="token keyword">in</span> the CategoryNode's Meta <span class="token keyword">class</span> <span class="token punctuation">(</span><span class="token keyword">as</span> you can see below<span class="token punctuation">)</span>
<span class="token keyword">class</span> <span class="token class-name">CategoryNode</span><span class="token punctuation">(</span>DjangoObjectType<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token operator">:</span>
        model <span class="token operator">=</span> Category
        filter_fields <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'ingredients'</span><span class="token punctuation">]</span>
        interfaces <span class="token operator">=</span> <span class="token punctuation">(</span>relay<span class="token punctuation">.</span>Node<span class="token punctuation">,</span> <span class="token punctuation">)</span></code></pre><div class="notion-text notion-block-eecb673cd4084d57ad0a511380cd6b28">不过很多时候考虑到 Relay 的复杂度，有时都不适合引入，更何况 Relay 需要特殊的 Schema 支持：</div><div class="notion-row notion-block-419c60d4a1a84f0ba4d39bb116e55b71"><div class="notion-column notion-block-63a72f800f3946378539183410ea26ba" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><pre class="notion-code language-graphql"><code class="language-graphql">query <span class="token punctuation">{</span>
  allIngredients <span class="token punctuation">{</span>
    edges <span class="token punctuation">{</span>
      node <span class="token punctuation">{</span>
        id<span class="token punctuation">,</span>
        name
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span></code></pre><figcaption class="notion-asset-caption">Relay Schema：edges、node 层级同样会出现在返回值</figcaption></div><div class="notion-spacer"></div><div class="notion-column notion-block-5c0491f03bc64f83aea39c6375e5f19d" style="width:calc((100% - (1 * min(32px, 4vw))) * 0.5)"><pre class="notion-code language-graphql"><code class="language-graphql">query <span class="token punctuation">{</span>
  allIngredients <span class="token punctuation">{</span>
    id
    name
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>



</code></pre><figcaption class="notion-asset-caption">原生 Schema： 明显更自然、简洁</figcaption></div><div class="notion-spacer"></div></div><div class="notion-text notion-block-25b4916ef4774955a012fbc141f700eb">这时候 graphene-django 就存在一个问题，当不使用 Relay 时，存在一些功能缺失：</div><ul class="notion-list notion-list-disc notion-block-ded5b120c51d4b1b8132a268a7d6b3f9"><li>Fragment \ Directives </li></ul><ul class="notion-list notion-list-disc notion-block-c75d9e445c274d5da510af554f9830a5"><li>分页、过滤</li></ul><ul class="notion-list notion-list-disc notion-block-33259eba02144fa9acda4e3e1eaf90ec"><li>通过 DRF Serializer 定义 Mutations</li></ul><div class="notion-text notion-block-21b3d48f64384238aad0c4a13b125c0f">所以我们需要引入额外的库来解决。</div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-3d929743493649a6a43da55924cdfa5e" data-id="3d929743493649a6a43da55924cdfa5e"><span><div id="3d929743493649a6a43da55924cdfa5e" class="notion-header-anchor"></div><a class="notion-hash-link" href="#3d929743493649a6a43da55924cdfa5e" title="引入 graphene-django-extras"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">引入 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/eamigo86/graphene-django-extras">graphene-django-extras</a></span></span></h4><pre class="notion-code language-python"><code class="language-python">from graphene <span class="token keyword">import</span> ObjectType
from graphene_django_extras <span class="token keyword">import</span> DjangoListObjectField<span class="token punctuation">,</span> DjangoListObjectType
from graphene_django_extras<span class="token punctuation">.</span>paginations <span class="token keyword">import</span> LimitOffsetGraphqlPagination

<span class="token keyword">class</span> <span class="token class-name">CommentListType</span><span class="token punctuation">(</span>DjangoListObjectType<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token operator">:</span>
        model <span class="token operator">=</span> Comment
        fields <span class="token operator">=</span> <span class="token string">"__all__"</span>
        pagination <span class="token operator">=</span> <span class="token function">LimitOffsetGraphqlPagination</span><span class="token punctuation">(</span>default_limit<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> ordering<span class="token operator">=</span><span class="token string">"-id"</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Query</span><span class="token punctuation">(</span>ObjectType<span class="token punctuation">)</span><span class="token operator">:</span>
    comments <span class="token operator">=</span> <span class="token function">DjangoListObjectField</span><span class="token punctuation">(</span>CommentListType<span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"Query all comments"</span><span class="token punctuation">)</span></code></pre><div class="notion-text notion-block-7b3762d8e2ad445e9c38eac7bedd68e5"><b>支持复杂过滤查询</b></div><div class="notion-text notion-block-6ebe03413a0040f4b7b5295e3b67a824">可以在列表对象中增加 <code class="notion-inline-code">filter_fields</code> ，针对不同的字段支持不同的 Django 复杂查询方法。</div><pre class="notion-code language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CommentListType</span><span class="token punctuation">(</span>DjangoListObjectType<span class="token punctuation">)</span><span class="token operator">:</span>
    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token operator">:</span>
        model <span class="token operator">=</span> Comment
        filter_fields <span class="token operator">=</span> <span class="token punctuation">{</span>
            <span class="token string-property property">"id"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"exact"</span><span class="token punctuation">,</span> <span class="token string">"in"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token string-property property">"content"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"exact"</span><span class="token punctuation">,</span> <span class="token string">"icontains"</span><span class="token punctuation">,</span> <span class="token string">"istartswith"</span><span class="token punctuation">]</span>
        <span class="token punctuation">}</span>
        pagination <span class="token operator">=</span> <span class="token function">LimitOffsetGraphqlPagination</span><span class="token punctuation">(</span>default_limit<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span> ordering<span class="token operator">=</span><span class="token string">"-username"</span><span class="token punctuation">)</span></code></pre><div class="notion-text notion-block-c71e31a767824aff9b82ee53004c179c">这样就可以将一些 Django 的查询能力释放到前端</div><pre class="notion-code language-graphql"><code class="language-graphql">query <span class="token punctuation">{</span>
  <span class="token function">comments</span><span class="token punctuation">(</span>id__In<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span> content_Icontains<span class="token operator">:</span> <span class="token string">"Amazing"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    totalCount
    <span class="token function">results</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">limit</span><span class="token operator">:</span> <span class="token number">10</span> <span class="token literal-property property">offset</span><span class="token operator">:</span> <span class="token number">0</span></span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      id
      email
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> 
<span class="token punctuation">}</span></code></pre><div class="notion-text notion-block-208020ce25114ee2a60d8b07df687d43"><b>自定义查询字段</b></div><div class="notion-text notion-block-fa290cc6855049289a6df8b9537c6cf3">Django 默认的查询能力，对于一些特殊字段并不能完全覆盖需求，这时我们就需要针对这些内容手写一些处理逻辑。</div><pre class="notion-code language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Query</span><span class="token punctuation">(</span>ObjectType<span class="token punctuation">)</span><span class="token operator">:</span>
    user <span class="token operator">=</span> <span class="token function">Field</span><span class="token punctuation">(</span>UserType<span class="token punctuation">,</span> description<span class="token operator">=</span><span class="token string">"Retrieve certain user"</span><span class="token punctuation">,</span> id<span class="token operator">=</span><span class="token function">Int</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> username<span class="token operator">=</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

		def <span class="token function">resolve_user</span><span class="token punctuation">(</span>
        self<span class="token punctuation">,</span> <span class="token literal-property property">context</span><span class="token operator">:</span> <span class="token string">"GraphQLResolveInfo"</span><span class="token punctuation">,</span> <span class="token literal-property property">id</span><span class="token operator">:</span> Optional<span class="token punctuation">[</span>int<span class="token punctuation">]</span> <span class="token operator">=</span> None<span class="token punctuation">,</span> <span class="token literal-property property">username</span><span class="token operator">:</span> Optional<span class="token punctuation">[</span>str<span class="token punctuation">]</span> <span class="token operator">=</span> None
    <span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> User<span class="token operator">:</span>
        <span class="token keyword">if</span> id is not None<span class="token operator">:</span>
            <span class="token keyword">return</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>pk<span class="token operator">=</span>id<span class="token punctuation">)</span>

        <span class="token keyword">if</span> username is None<span class="token operator">:</span>
            raise <span class="token function">ValueError</span><span class="token punctuation">(</span><span class="token string">"username or pk at least one is required"</span><span class="token punctuation">)</span>

        # <span class="token keyword">do</span> some custom logic
        <span class="token operator">...</span>

        <span class="token keyword">return</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">)</span></code></pre><div class="notion-text notion-block-cce7dff50ba44dffa5f85844bfdcf91b">需要注意的是，当我们使用 <code class="notion-inline-code">resolve_</code> 函数去处理查询时，GraphQL 和 REST 本质上只是查询 DSL 有所区别，都会遇到类似像 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://stackoverflow.com/questions/97197/what-is-the-n1-selects-problem-in-orm-object-relational-mapping">N+1</a> 这样的慢查询问题，所以需要谨慎地将前端的查询转换成可靠的 Django ORM 查询。</div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-0068853173e54e1bacc12aa21d51205d" data-id="0068853173e54e1bacc12aa21d51205d"><span><div id="0068853173e54e1bacc12aa21d51205d" class="notion-header-anchor"></div><a class="notion-hash-link" href="#0068853173e54e1bacc12aa21d51205d" title="鉴权"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">鉴权</span></span></h4><div class="notion-text notion-block-41b09c496df54886b6b685e8f38fb9c5">由于 API 请求并不再经过传统封装的 ViewSet，原有的鉴权组件不再能使用，你需要引入新的 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/redzej/graphene-permissions">graphene-permissions</a> 来解决针对用户的权限控制。</div><div class="notion-text notion-block-486546d75ed744b48491c065b47b6915">本文成文时，graphene-permissions 对于最新的 Graphene 3.x 有一些<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/redzej/graphene-permissions/pull/36">小的兼容性问题</a>，由于该库代码量非常小，可以考虑复制到自己的项目手动维护。</div><pre class="notion-code language-python"><code class="language-python">from <span class="token punctuation">.</span>mixins <span class="token keyword">import</span> AuthNode
from <span class="token punctuation">.</span>permissions <span class="token keyword">import</span> AllowSuperuser

<span class="token keyword">class</span> <span class="token class-name">UserNode</span><span class="token punctuation">(</span>AuthNode<span class="token punctuation">,</span> DjangoObjectType<span class="token punctuation">)</span><span class="token operator">:</span>
    permission_classes <span class="token operator">=</span> <span class="token punctuation">(</span>AllowAuthenticated<span class="token punctuation">,</span><span class="token punctuation">)</span>

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token operator">:</span>
        model <span class="token operator">=</span> User
        filter_fields <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>
        interfaces <span class="token operator">=</span> <span class="token punctuation">(</span>relay<span class="token punctuation">.</span>Node<span class="token punctuation">,</span><span class="token punctuation">)</span></code></pre><div class="notion-blank notion-block-3a7758ed778747038fbc0b83f8c7ec6e"> </div><div class="notion-text notion-block-212d68c0638c45c1a66570938e3eb1c7">尴尬的是，如果你并不想用 Relay，我们需要针对 graphene-django-extras 做一些自己的定制，而原有的封装没有很好地暴露足够的接口，经过一番探索并无头绪，最终作罢🥴。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-10f53459be3844c7a1355a1ed5bd63b9" data-id="10f53459be3844c7a1355a1ed5bd63b9"><span><div id="10f53459be3844c7a1355a1ed5bd63b9" class="notion-header-anchor"></div><a class="notion-hash-link" href="#10f53459be3844c7a1355a1ed5bd63b9" title="总结"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">总结</span></span></h3><ul class="notion-list notion-list-disc notion-block-9d67626a1d9641cd90f5af2e20aa6bc9"><li>GraphQL 在前端需求迭代频繁的场景下，比 REST 更符合现代开发节奏</li></ul><ul class="notion-list notion-list-disc notion-block-9f6415435fd9484fbc2ce5c4d2770bfe"><li>GraphQL 的语言设计比自定义扩展的 REST 更自然，更具备通用性</li></ul><ul class="notion-list notion-list-disc notion-block-2448995dbf5046fb8d4cf720a8a4991a"><li>GraphQL 会将比较多的工作放到客户端，适合成熟的客户端开发团队，反之 REST 是更好的选择</li></ul><ul class="notion-list notion-list-disc notion-block-df526e5ca78840c8a0cf8355e37cf7bf"><li>Django 相关的生态建设并不完善，没有一个足够强大、开箱即用的整合方案</li></ul><ul class="notion-list notion-list-disc notion-block-f819d57fbe4b469683400d4b084480c1"><li>由于查询并不是基于 Uri 维度，会给周边配套的生态—— 监控、日志等 ——带来一些新的挑战</li></ul><div class="notion-blank notion-block-ddaf5c2480f746f791a762c4707709f5"> </div></main>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[不要往 AMQP 的 Header 乱塞东西]]></title>
        <id>https://next.emergencyexit.xyz//amqp-header-has-frame-max-limit</id>
        <link href="https://next.emergencyexit.xyz//amqp-header-has-frame-max-limit"/>
        <updated>2021-11-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[内容过度封装，标题过于直白]]></summary>
        <content type="html"><![CDATA[<main class="notion light-mode notion-page notion-full-width notion-small-text notion-block-da9db88226ea4516815c75f2f9ddab59"><div class="notion-viewport"></div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-2fd1bb98202342939e35ee2f8efff7ae" data-id="2fd1bb98202342939e35ee2f8efff7ae"><span><div id="2fd1bb98202342939e35ee2f8efff7ae" class="notion-header-anchor"></div><a class="notion-hash-link" href="#2fd1bb98202342939e35ee2f8efff7ae" title="前情提要"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">前情提要</span></span></h3><div class="notion-text notion-block-528ec1ed01944bb0817d5ce684823362">一直以来，我们在 Python 项目中的后台任务都是使用 celery 搭配 Redis(作为 broker)来完成，同时针对短任务轮询场景我们也<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/TencentBlueKing/bkpaas-python-sdk/tree/master/sdks/blue-krill/blue_krill/async_utils">做了一些封装</a>。在项目运行的三~四年间，这套方案完美地承载了我们核心功能。</div><div class="notion-text notion-block-20bb6ad0221948d08881077d55bbbc63">然而，就在不久前的一周，出现一些比较诡异的问题，总是有些后台任务发生阻塞，我们使用的多种异常观测手段（<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://sentry.io/">Sentry</a>、日志等）都无法准确定位到具体问题（这或许是另一个故事），于是死马当活马医，我们决定将 Redis 更换为 RabbitMQ，这样能够更为准确地观测到任务具体执行的消息情况（例如是否及时Ack）。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-b75e1c76f97445b8a2dd0c4314fd5fb7" data-id="b75e1c76f97445b8a2dd0c4314fd5fb7"><span><div id="b75e1c76f97445b8a2dd0c4314fd5fb7" class="notion-header-anchor"></div><a class="notion-hash-link" href="#b75e1c76f97445b8a2dd0c4314fd5fb7" title="案发现场"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">案发现场</span></span></h3><div class="notion-text notion-block-075fe4f158b142519af19e46a7772d99">更换完 broker 之后，却发现了另一个奇怪的问题（没错，这才是本文的主角）。我们在某一些特殊资源的场景下，celery 任务会直接报错：</div><pre class="notion-code language-python"><code class="language-python"><span class="token literal-property property">ConnectionResetError</span><span class="token operator">:</span> <span class="token punctuation">[</span>Errno <span class="token number">104</span><span class="token punctuation">]</span> Connection reset by peer
  File <span class="token string">"kombu/connection.py"</span><span class="token punctuation">,</span> line <span class="token number">414</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _reraise_as_library_errors
    <span class="token keyword">yield</span>
  File <span class="token string">"kombu/connection.py"</span><span class="token punctuation">,</span> line <span class="token number">494</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _ensured
    <span class="token keyword">return</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
  File <span class="token string">"kombu/messaging.py"</span><span class="token punctuation">,</span> line <span class="token number">203</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _publish
    mandatory<span class="token operator">=</span>mandatory<span class="token punctuation">,</span> immediate<span class="token operator">=</span>immediate<span class="token punctuation">,</span>
  File <span class="token string">"amqp/channel.py"</span><span class="token punctuation">,</span> line <span class="token number">1766</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token function">_basic_publish</span>
    <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> routing_key<span class="token punctuation">,</span> mandatory<span class="token punctuation">,</span> immediate<span class="token punctuation">)</span><span class="token punctuation">,</span> msg
  File <span class="token string">"amqp/abstract_channel.py"</span><span class="token punctuation">,</span> line <span class="token number">59</span><span class="token punctuation">,</span> <span class="token keyword">in</span> send_method
    conn<span class="token punctuation">.</span><span class="token function">frame_writer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>channel_id<span class="token punctuation">,</span> sig<span class="token punctuation">,</span> args<span class="token punctuation">,</span> content<span class="token punctuation">)</span>
  File <span class="token string">"amqp/method_framing.py"</span><span class="token punctuation">,</span> line <span class="token number">154</span><span class="token punctuation">,</span> <span class="token keyword">in</span> write_frame
    <span class="token number">2</span><span class="token punctuation">,</span> channel<span class="token punctuation">,</span> framelen<span class="token punctuation">,</span> frame<span class="token punctuation">,</span> <span class="token number">0xce</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  File <span class="token string">"amqp/transport.py"</span><span class="token punctuation">,</span> line <span class="token number">305</span><span class="token punctuation">,</span> <span class="token keyword">in</span> write
    self<span class="token punctuation">.</span><span class="token function">_write</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span></code></pre><div class="notion-text notion-block-c68ba31ee3a2430db79b993e87e7dd29">由于我们使用了一层 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://cloud.tencent.com/product/clb">CLB</a> 作为高可用代理，而之前的使用经验中，CLB 可能会有一些长时间无数据断连的情况，所以我们暂时认为可能是某些长时间的阻塞任务会导致 CLB 主动断开，为了排除干扰，我们甩开了 CLB，直接采用 MQ 的多个节点作为地址直连。</div><div class="notion-text notion-block-c29cd374f8244d86bbf238b6f7ab9f20">然而，问题依旧，一时间又没了头绪，我开始漫无目的重新浏览 Sentry 中的错误堆栈以及相关变量。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-2c0cbf6be3564463a1d3f5c7c359cf03" data-id="2c0cbf6be3564463a1d3f5c7c359cf03"><span><div id="2c0cbf6be3564463a1d3f5c7c359cf03" class="notion-header-anchor"></div><a class="notion-hash-link" href="#2c0cbf6be3564463a1d3f5c7c359cf03" title="蛛丝马迹"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">蛛丝马迹</span></span></h3><div class="notion-text notion-block-edebeefb4a5a4e5fbd8cc7b18d985e42">无意间，发现在代码中，我们尝试向队列中存储一大段 pickle 过的对象数据，而这些变量在 Sentry 中已经长到无法完整显示而被省略了。</div><pre class="notion-code language-python"><code class="language-python"><span class="token operator">...</span>
any_task<span class="token punctuation">.</span><span class="token function">apply_async</span><span class="token punctuation">(</span>headers<span class="token operator">=</span>something_big<span class="token punctuation">)</span>
<span class="token operator">...</span></code></pre><div class="notion-text notion-block-fe84bd6e13c6414b8ac71a4179eb4bb2">这个问题立马引起了我们的注意🤔，很有可能是这个数据过大而引起写入异常。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-7a1416bab27641539543f1403efffbe1" data-id="7a1416bab27641539543f1403efffbe1"><span><div id="7a1416bab27641539543f1403efffbe1" class="notion-header-anchor"></div><a class="notion-hash-link" href="#7a1416bab27641539543f1403efffbe1" title="破案"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">破案</span></span></h3><div class="notion-text notion-block-603942a46c0e440c90c00e051afc6b61">照此思路，经过一番网络冲浪，发现了类似的问题：</div><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-836f467d848d4649920834343af991d9" href="https://stackoverflow.com/questions/30716002/is-there-a-size-limit-on-a-rabbitmq-message-header"><div><div class="notion-bookmark-title">stackoverflow.com</div><div class="notion-bookmark-link"><div>https://stackoverflow.com/questions/30716002/is-there-a-size-limit-on-a-rabbitmq-message-header</div></div></div></a></div><div class="notion-text notion-block-f4e372a376ca4c9aa097e6d90f2e0571">这时候，再去反查 RabbitMQ 的日志，果然有对应内容：</div><pre class="notion-code language-plain text"><code class="language-plain text"><span class="token number">2021</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">16</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">32.098</span> <span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token number">0.3894</span><span class="token number">.1636</span><span class="token operator">></span> Error on <span class="token constant">AMQP</span> connection <span class="token operator">&lt;</span><span class="token number">0.3894</span><span class="token number">.1636</span><span class="token operator">></span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token operator">:</span><span class="token number">59823</span> <span class="token operator">-</span><span class="token operator">></span> x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token operator">:</span><span class="token number">5672</span><span class="token punctuation">,</span> <span class="token literal-property property">vhost</span><span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">'foo'</span><span class="token punctuation">,</span> <span class="token literal-property property">state</span><span class="token operator">:</span> running<span class="token punctuation">)</span><span class="token punctuation">,</span> channel <span class="token number">1</span><span class="token operator">:</span>
 operation none caused a connection exception frame_error<span class="token operator">:</span> <span class="token string">"type 2, all octets = &lt;&lt;>>: {frame_too_large,245629,131064}"</span>

<span class="token number">2021</span><span class="token operator">-</span><span class="token number">11</span><span class="token operator">-</span><span class="token number">16</span> <span class="token number">19</span><span class="token operator">:</span><span class="token number">49</span><span class="token operator">:</span><span class="token number">35.099</span> <span class="token punctuation">[</span>error<span class="token punctuation">]</span> <span class="token operator">&lt;</span><span class="token number">0.3894</span><span class="token number">.1636</span><span class="token operator">></span> closing <span class="token constant">AMQP</span> connection <span class="token operator">&lt;</span><span class="token number">0.3894</span><span class="token number">.1636</span><span class="token operator">></span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token operator">:</span><span class="token number">59823</span> <span class="token operator">-</span><span class="token operator">></span> x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token punctuation">.</span>x<span class="token operator">:</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token operator">:</span>
fatal_frame_error</code></pre><div class="notion-text notion-block-6bf413a4480d4f3a8d9c025ef425f80f">这里非常明确地指出了，由于我们传递的 frame 大小(<span class="notion-pink">245629 bytes</span>) 大于默认的 <span class="notion-teal">131064 + 8(frame header) bytes (128KB)</span>，所以 RabbitMQ 关闭了连接。</div><div class="notion-text notion-block-e2a33f338c1445b79c42d0afc87e057d">于是我们立即着手，精简了向 <code class="notion-inline-code">headers</code> 传送的数据，重新发布后，终于一切归于正常。</div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-dc2f5dc2fec34667b5c0ed688a5ad257" data-id="dc2f5dc2fec34667b5c0ed688a5ad257"><span><div id="dc2f5dc2fec34667b5c0ed688a5ad257" class="notion-header-anchor"></div><a class="notion-hash-link" href="#dc2f5dc2fec34667b5c0ed688a5ad257" title="梳理"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">梳理</span></span></h3><div class="notion-text notion-block-e3c48e89946647c1831ebefdda992ae3">虽然问题已经得到了解决，但是仍旧需要补齐一下相关知识的短板。</div><div class="notion-text notion-block-61e5471f5bcb4261be4d867e4f2e9aa7">首先，让我们再来简单看看<b> AMQP </b> <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf">0.9.1 版本</a> <b>协议有关这部分的内容</b>。</div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-9723aa5f81bb41e391e1f1151f551a9f" data-id="9723aa5f81bb41e391e1f1151f551a9f"><span><div id="9723aa5f81bb41e391e1f1151f551a9f" class="notion-header-anchor"></div><a class="notion-hash-link" href="#9723aa5f81bb41e391e1f1151f551a9f" title="AMQP 协议"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">AMQP 协议</span></span></h4><div class="notion-text notion-block-01c08f9939e245b592f65d2bcb7ad82c">这是协议中所有 TCP/IP 帧组成</div><pre class="notion-code language-plain text"><code class="language-plain text"><span class="token number">0</span>      <span class="token number">1</span>         <span class="token number">3</span>         <span class="token number">7</span>                 size<span class="token operator">+</span><span class="token number">7</span> size<span class="token operator">+</span><span class="token number">8</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
<span class="token operator">|</span> type <span class="token operator">|</span> channel <span class="token operator">|</span>   size  <span class="token operator">|</span> <span class="token operator">|</span>   payload   <span class="token operator">|</span> <span class="token operator">|</span> frame<span class="token operator">-</span>end <span class="token operator">|</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span> <span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span>
 octet    short      long      <span class="token string">'size'</span> octets     octet</code></pre><figcaption class="notion-asset-caption">General Frame Format</figcaption><div class="notion-text notion-block-5827cff6f99e46808af91cff5775984a">其中有这么几个关键信息：</div><ul class="notion-list notion-list-disc notion-block-9af4994f707f4d3198e771aeccdac8fd"><li>0-7 bytes 确定了帧的类型和具体的 channel，确定了类型后将会处理 payload</li></ul><ul class="notion-list notion-list-disc notion-block-acb5e1e906eb49b489d81b429513a796"><li>payload 的大小在协议中并没有规定，而是说的是可以通过客户端和服务端的”协商“确定(page 22)</li></ul><ul class="notion-list notion-list-disc notion-block-390c2b197597418ebdcf846a85bda9fb"><li>不同类型帧有着不同的 payload 构成</li></ul><div class="notion-text notion-block-a081e54c2a7c4d89bc208e8629086ecc">当前问题主要是传递应用数据的场景下，所以我们来看具体承载的 Content 帧</div><div class="notion-text notion-block-07bf41aad49f47fc80c8a12325e83a9f">简单点来说，Content 帧就是一系列的 properties 加上二进制的数据部分。这些 properties 将会组成 &quot;content header frame&quot;，它大概是这样的组成：</div><pre class="notion-code language-plain text"><code class="language-plain text"><span class="token number">0</span>          <span class="token number">2</span>        <span class="token number">4</span>           <span class="token number">12</span>               <span class="token number">14</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">-</span> <span class="token operator">-</span>
<span class="token operator">|</span> <span class="token keyword">class</span><span class="token operator">-</span>id <span class="token operator">|</span> weight <span class="token operator">|</span> body size <span class="token operator">|</span> property flags <span class="token operator">|</span> property list<span class="token operator">...</span>
<span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">+</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">-</span> <span class="token operator">-</span>
    short    short    long long        short        remainder<span class="token operator">...</span></code></pre><div class="notion-text notion-block-0dca7c859bee420589ced554d4f85e43">也就是在我们的 celery 代码中， <code class="notion-inline-code">headers=(...)</code> 传递的内容将会被塞入 property list 中，在协议中并没有明确具体的大小限制，同时没有表明会做的分块(content body 部分是会的)，所以当前产生的问题限制，主要受制于 RabbitMQ 的具体实现。</div><a style="width:100%" href="https://blog.rabbitmq.com/posts/2012/11/breaking-things-with-rabbitmq-3-0/" target="blank_"><figure class="notion-asset-wrapper notion-asset-wrapper-image notion-block-18bd8584c6e04a5b874d660b84a9aa41"><div style="position:relative;display:flex;justify-content:center;align-self:center;width:100%;max-width:100%;flex-direction:column;height:100%"><img style="object-fit:contain" src="https://www.notion.so/image/https%3A%2F%2Fs3.us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F13faba46-c644-41e9-80b1-cdb3fb4659ad%2FUntitled.png%3FX-Amz-Algorithm%3DAWS4-HMAC-SHA256%26X-Amz-Content-Sha256%3DUNSIGNED-PAYLOAD%26X-Amz-Credential%3DAKIAT73L2G45EIPT3X45%252F20221018%252Fus-west-2%252Fs3%252Faws4_request%26X-Amz-Date%3D20221018T135542Z%26X-Amz-Expires%3D86400%26X-Amz-Signature%3D7debb4becc15014015a27c3c2895b30a96cc11dddb0d8227974740d929c8c99d%26X-Amz-SignedHeaders%3Dhost%26x-id%3DGetObject?table=block&amp;id=18bd8584-c6e0-4a5b-874d-660b84a9aa41&amp;cache=v2" loading="lazy" alt="https://blog.rabbitmq.com/posts/2012/11/breaking-things-with-rabbitmq-3-0/" decoding="async"/></div></figure></a><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-59829334ff524b7088f05a5edaa97b62" data-id="59829334ff524b7088f05a5edaa97b62"><span><div id="59829334ff524b7088f05a5edaa97b62" class="notion-header-anchor"></div><a class="notion-hash-link" href="#59829334ff524b7088f05a5edaa97b62" title="三点感悟"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">三点感悟</span></span></h3><ul class="notion-list notion-list-disc notion-block-0692431de3bf494bbcfaf7eb798dcdde"><li><b>错误监测非常重要</b>。如果没有 Sentry，问题的定位可能会更加困难，多耗几天精力也未可知。</li></ul><ul class="notion-list notion-list-disc notion-block-ebefa435969a4d8aac3bd6a6730d457b"><li><b>要善于利用不同组件的优势</b>。之所以一开始使用 Redis 而不是 RabbitMQ，更多是从运营维护的角度出发，在公司内部 Redis 有更完善的基建基础，而 RabbitMQ 的运维更加复杂。但是遇到像这样幽灵般的问题时，RabbitMQ 反而更有优势，完善的流程更容易暴露问题。</li></ul><ul class="notion-list notion-list-disc notion-block-b4f62d66ce704d938ac544e6dce65dcf"><li><b>要适当地了解重点依赖的技术细节</b>。大多数场景下，简单地使用协议就足够了，而在一些边缘场景中，则更看重技术人员对细节的把控。这类属于重要不紧急的事情，应该定时拿出来有意识去做，虽无近用，却有远益。</li></ul><div class="notion-blank notion-block-e3b1fcaa802046a1ab9e5f2c4f518a22"> </div><div class="notion-text notion-block-ef7b0aac6baf4b63a07c50093c208254">参考：</div><ul class="notion-list notion-list-disc notion-block-7dcaa094a6db4402a8894c00ccb96770"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf">https://www.rabbitmq.com/resources/specs/amqp0-9-1.pdf</a></li></ul><ul class="notion-list notion-list-disc notion-block-1e5cb10672c046219ff3b369a125183b"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://john.eckersberg.com/debugging-rabbitmq-frame_too_large-error.html">https://john.eckersberg.com/debugging-rabbitmq-frame_too_large-error.html</a></li></ul><ul class="notion-list notion-list-disc notion-block-bfb28b545f674bcea5b3bdf1c9959814"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://stackoverflow.com/questions/30716002/is-there-a-size-limit-on-a-rabbitmq-message-header">https://stackoverflow.com/questions/30716002/is-there-a-size-limit-on-a-rabbitmq-message-header</a></li></ul><ul class="notion-list notion-list-disc notion-block-416d48d7c02546b097551ec6ca3e5552"><li><a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://www.rabbitmq.com/amqp-0-9-1-errata.html#section_11">https://www.rabbitmq.com/amqp-0-9-1-errata.html#section_11</a></li></ul><div class="notion-blank notion-block-4d750428c0ef4db09420bab4eabfcffe"> </div></main>]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[一些 Helm 最(tòng)佳(kǔ)实践]]></title>
        <id>https://next.emergencyexit.xyz//helm-pratices</id>
        <link href="https://next.emergencyexit.xyz//helm-pratices"/>
        <updated>2021-09-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[标题的 emoji 就是我对 Helm 的评价]]></summary>
        <content type="html"><![CDATA[<main class="notion light-mode notion-page notion-block-692194e608d34e36a94fdc403d6226e6"><div class="notion-viewport"></div><div class="notion-blank notion-block-b9fcb6ecf13e45ec9ccc108cfa563a9c"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-2f89a200d0aa4f0da16f6b08342f5197" data-id="2f89a200d0aa4f0da16f6b08342f5197"><span><div id="2f89a200d0aa4f0da16f6b08342f5197" class="notion-header-anchor"></div><a class="notion-hash-link" href="#2f89a200d0aa4f0da16f6b08342f5197" title="yaml工程师的血泪 shi"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title"><code class="notion-inline-code">yaml</code>工程师的血泪 shi</span></span></h3><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-be1a0c200df8465293f7023588c8c7dc" data-id="be1a0c200df8465293f7023588c8c7dc"><span><div id="be1a0c200df8465293f7023588c8c7dc" class="notion-header-anchor"></div><a class="notion-hash-link" href="#be1a0c200df8465293f7023588c8c7dc" title="子 Chart 使用中划线时无法作为参数路径选取"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">子 Chart 使用中划线时无法作为参数路径选取</span></span></h4><pre class="notion-code language-yaml"><code class="language-yaml"># values<span class="token punctuation">.</span>yaml
sub<span class="token operator">-</span>foo<span class="token operator">-</span>chart<span class="token operator">:</span>
  <span class="token literal-property property">preferName</span><span class="token operator">:</span> <span class="token string">"Happy"</span>

# _helper<span class="token punctuation">.</span>tpl
<span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token punctuation">.</span>Values<span class="token punctuation">.</span>sub<span class="token operator">-</span>foo<span class="token operator">-</span>chart<span class="token punctuation">.</span>preferName <span class="token punctuation">}</span><span class="token punctuation">}</span> ❌ 错误写法

<span class="token punctuation">{</span><span class="token punctuation">{</span> index <span class="token punctuation">.</span>Values <span class="token string">"sub-foo-chart"</span> <span class="token string">"preferName"</span> <span class="token punctuation">}</span><span class="token punctuation">}</span> 💩 正确但丑陋的写法</code></pre><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-753e263d13114c8baeb1ea5f172224cb" href="https://github.com/helm/helm/issues/2192"><div><div class="notion-bookmark-title">Accessing values of the subchart with dash in the name · Issue #2192 · helm/helm</div><div class="notion-bookmark-description">Based on the docs, there is a convention to name charts with dashes. But at the same time based on this doc, you should never have values with dashes. So, let&#x27;s say I have 2 dependent charts: gitlab and gitlab-runner. How can I configure...</div><div class="notion-bookmark-link"><img src="https://github.com/favicon.ico" alt="Accessing values of the subchart with dash in the name · Issue #2192 · helm/helm" loading="lazy"/><div>https://github.com/helm/helm/issues/2192</div></div></div><div class="notion-bookmark-image"><img src="https://opengraph.githubassets.com/bfc0bd61b92c77a24e09f20dd5af7c1b948be1bdd5f1e6bef8a643e4f1be3a67/helm/helm/issues/2192" alt="Accessing values of the subchart with dash in the name · Issue #2192 · helm/helm" loading="lazy"/></div></a></div><div class="notion-blank notion-block-8294e02306dc494d965321332084ebf2"> </div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-f5210e6ca3ce4672baef5771b60122e4" data-id="f5210e6ca3ce4672baef5771b60122e4"><span><div id="f5210e6ca3ce4672baef5771b60122e4" class="notion-header-anchor"></div><a class="notion-hash-link" href="#f5210e6ca3ce4672baef5771b60122e4" title="Chart 之间的继承关系只能有一级"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Chart 之间的继承关系只能有一级</span></span></h4><div class="notion-text notion-block-7ccedd92cd344cc28792052af901bc27">所有的依赖关系必须简化成两层</div><pre class="notion-code language-yaml"><code class="language-yaml"># parentchart<span class="token operator">/</span>requirements<span class="token punctuation">.</span>yaml
<span class="token literal-property property">dependencies</span><span class="token operator">:</span>
  <span class="token operator">-</span> name<span class="token operator">:</span> childchart
    <span class="token literal-property property">repository</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">10191</span>
    <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token number">.0</span>
    <span class="token literal-property property">condition</span><span class="token operator">:</span> childchart<span class="token punctuation">.</span>enabled

# childchart<span class="token operator">/</span>requirements<span class="token punctuation">.</span>yaml
<span class="token literal-property property">dependencies</span><span class="token operator">:</span>
  <span class="token operator">-</span> name<span class="token operator">:</span> grandchildchart
    <span class="token literal-property property">repository</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">10191</span>
    <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token number">0.1</span><span class="token number">.0</span>
    <span class="token literal-property property">condition</span><span class="token operator">:</span> grandchildchart1<span class="token punctuation">.</span>enabled<span class="token punctuation">,</span>childchart<span class="token punctuation">.</span>grandchildchart<span class="token punctuation">.</span>enabled

# parentchart<span class="token operator">/</span>values<span class="token punctuation">.</span>yaml
<span class="token literal-property property">childchart</span><span class="token operator">:</span>
  <span class="token literal-property property">grandchildchart</span><span class="token operator">:</span>
    <span class="token literal-property property">enabled</span><span class="token operator">:</span> <span class="token boolean">true</span>  ❌ 并不能够生效</code></pre><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-d09a4715e5b64c9591f6ed61f316712f" href="https://github.com/helm/helm/issues/5135"><div><div class="notion-bookmark-title">Nested sub charts values · Issue #5135 · helm/helm</div><div class="notion-bookmark-description">You can&#x27;t perform that action at this time. You signed in with another tab or window. You signed out in another tab or window. Reload to refresh your session. Reload to refresh your session.</div><div class="notion-bookmark-link"><img src="https://github.com/favicon.ico" alt="Nested sub charts values · Issue #5135 · helm/helm" loading="lazy"/><div>https://github.com/helm/helm/issues/5135</div></div></div><div class="notion-bookmark-image"><img src="https://opengraph.githubassets.com/2acc1c0f82187220a5dec781e9bc6a86e7417d3b96ab5ce3dd32241264277fa3/helm/helm/issues/5135" alt="Nested sub charts values · Issue #5135 · helm/helm" loading="lazy"/></div></a></div><div class="notion-blank notion-block-b0bea53b8ff94841b76d8ef0a34be617"> </div><h4 class="notion-h notion-h3 notion-h-indent-1 notion-block-77ed95e367b14e8b90ea4c0161fe21fa" data-id="77ed95e367b14e8b90ea4c0161fe21fa"><span><div id="77ed95e367b14e8b90ea4c0161fe21fa" class="notion-header-anchor"></div><a class="notion-hash-link" href="#77ed95e367b14e8b90ea4c0161fe21fa" title="Hook 创建的资源不能被 uninstall"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">Hook 创建的资源不能被 uninstall</span></span></h4><pre class="notion-code language-yaml"><code class="language-yaml"><span class="token literal-property property">annotations</span><span class="token operator">:</span>
	<span class="token string-property property">"helm.sh/hook"</span><span class="token operator">:</span> <span class="token string">"pre-install"</span>
  <span class="token string-property property">"helm.sh/hook-weight"</span><span class="token operator">:</span> <span class="token string">"-1"</span>
  <span class="token string-property property">"helm.sh/hook-delete-policy"</span><span class="token operator">:</span> hook<span class="token operator">-</span>failed<span class="token punctuation">,</span>before<span class="token operator">-</span>hook<span class="token operator">-</span>creation</code></pre><div class="notion-text notion-block-d98735ecd5d4450481862ed7027ee902">类似这样通过 helm hook 创建出来的资源，是不能够被 <code class="notion-inline-code">helm uninstall</code> 删除的。如果只是用来做一些临时任务当然问题不大，但是我们利用了 hook 创建了一些内建存储，所以无法删除的特性会带来大量的无用存储资源占用，非常头疼。</div><div class="notion-blank notion-block-53c2a890dd814d378430b75dfba62485"> </div><div class="notion-text notion-block-0f9f00ceda3c4ed78774e1eb76bf155c">可以通过 label 统一删除，一个临时的 workaround 💩：</div><pre class="notion-code language-bash"><code class="language-bash">kubectl <span class="token keyword">delete</span> deploy<span class="token punctuation">,</span>sts<span class="token punctuation">,</span>cronjob<span class="token punctuation">,</span>pod<span class="token punctuation">,</span>svc<span class="token punctuation">,</span>ingress<span class="token punctuation">,</span>secret<span class="token punctuation">,</span>cm<span class="token punctuation">,</span>sa<span class="token punctuation">,</span>pvc <span class="token operator">-</span>n $<span class="token punctuation">{</span><span class="token constant">NAMESPACE</span><span class="token punctuation">}</span> <span class="token operator">-</span>l app<span class="token punctuation">.</span>kubernetes<span class="token punctuation">.</span>io<span class="token operator">/</span>instance<span class="token operator">=</span>$<span class="token punctuation">{</span><span class="token constant">RELEASE_NAME</span><span class="token punctuation">}</span></code></pre><div class="notion-row"><a target="_blank" rel="noopener noreferrer" class="notion-bookmark notion-block-5054a00d00ee4960b160a65906fcb1a2" href="https://github.com/helm/helm/issues/9206"><div><div class="notion-bookmark-title">Manifests with hooks not getting deleted during helm uninstall · Issue #9206 · helm/helm</div><div class="notion-bookmark-description">tomcruise81 changed the title PodDisruptionBudget with hooks not getting deleted during helm uninstall Hooks not getting deleted during helm uninstall Jan 8, 2021 tomcruise81 changed the title Hooks not getting deleted during helm uninstall Manifests with hooks not getting deleted during helm uninstall Jan 8, 2021 You can&#x27;t perform that action at this time.</div><div class="notion-bookmark-link"><img src="https://github.com/favicon.ico" alt="Manifests with hooks not getting deleted during helm uninstall · Issue #9206 · helm/helm" loading="lazy"/><div>https://github.com/helm/helm/issues/9206</div></div></div><div class="notion-bookmark-image"><img src="https://opengraph.githubassets.com/d56b0963c9d3fd8e0e9035dff30b12ddcc65b9ea136bb3e600ef428bb7aa7f31/helm/helm/issues/9206" alt="Manifests with hooks not getting deleted during helm uninstall · Issue #9206 · helm/helm" loading="lazy"/></div></a></div><div class="notion-blank notion-block-0ec7e3aa50f94be6ba7bc47b62f7cd79"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-55acbb4404c7441a843cc3bf8d644594" data-id="55acbb4404c7441a843cc3bf8d644594"><span><div id="55acbb4404c7441a843cc3bf8d644594" class="notion-header-anchor"></div><a class="notion-hash-link" href="#55acbb4404c7441a843cc3bf8d644594" title="一些苦中作乐的解决方案"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">一些苦中作乐的解决方案</span></span></h3><div class="notion-blank notion-block-10728219884d423aa0712f69282089e7"> </div><h3 class="notion-h notion-h2 notion-h-indent-0 notion-block-71917a09e0634f8dbf4e92909aa32e16" data-id="71917a09e0634f8dbf4e92909aa32e16"><span><div id="71917a09e0634f8dbf4e92909aa32e16" class="notion-header-anchor"></div><a class="notion-hash-link" href="#71917a09e0634f8dbf4e92909aa32e16" title="为多个项目模块创建统一的库"><svg viewBox="0 0 16 16" width="16" height="16"><path fill-rule="evenodd" d="M7.775 3.275a.75.75 0 001.06 1.06l1.25-1.25a2 2 0 112.83 2.83l-2.5 2.5a2 2 0 01-2.83 0 .75.75 0 00-1.06 1.06 3.5 3.5 0 004.95 0l2.5-2.5a3.5 3.5 0 00-4.95-4.95l-1.25 1.25zm-4.69 9.64a2 2 0 010-2.83l2.5-2.5a2 2 0 012.83 0 .75.75 0 001.06-1.06 3.5 3.5 0 00-4.95 0l-2.5 2.5a3.5 3.5 0 004.95 4.95l1.25-1.25a.75.75 0 00-1.06-1.06l-1.25 1.25a2 2 0 01-2.83 0z"></path></svg></a><span class="notion-h-title">为多个项目模块创建统一的库</span></span></h3><div class="notion-text notion-block-3f59efe5595a4a8fb688c2215c160c73">如果项目中存在多个模块，那么可以通过 subChart 方式统一整合</div><pre class="notion-code language-yaml"><code class="language-yaml"><span class="token literal-property property">apiVersion</span><span class="token operator">:</span> v2
<span class="token literal-property property">name</span><span class="token operator">:</span> bk<span class="token operator">-</span>user<span class="token operator">-</span>stack
<span class="token literal-property property">description</span><span class="token operator">:</span> <span class="token constant">A</span> Helm chart <span class="token keyword">for</span> bk<span class="token operator">-</span>user
<span class="token literal-property property">type</span><span class="token operator">:</span> application
<span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token number">0.5</span><span class="token number">.1</span>
<span class="token literal-property property">appVersion</span><span class="token operator">:</span> v2<span class="token punctuation">.</span><span class="token number">3.0</span><span class="token operator">-</span>a2

<span class="token literal-property property">dependencies</span><span class="token operator">:</span>
<span class="token operator">-</span> name<span class="token operator">:</span> bkuserapi
  <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span>
  <span class="token literal-property property">repository</span><span class="token operator">:</span> <span class="token string">"file://../api"</span>
  <span class="token literal-property property">condition</span><span class="token operator">:</span> bkuserapi<span class="token punctuation">.</span>enabled

<span class="token operator">-</span> name<span class="token operator">:</span> bkusersaas
  <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span>
  <span class="token literal-property property">repository</span><span class="token operator">:</span> <span class="token string">"file://../saas"</span>
  <span class="token literal-property property">condition</span><span class="token operator">:</span> bkusersaas<span class="token punctuation">.</span>enabled

<span class="token operator">-</span> name<span class="token operator">:</span> mariadb
  <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">"9.x.x"</span>
  <span class="token literal-property property">repository</span><span class="token operator">:</span> <span class="token string">"https://charts.bitnami.com/bitnami"</span>
  <span class="token literal-property property">condition</span><span class="token operator">:</span> mariadb<span class="token punctuation">.</span>enabled

<span class="token operator">-</span> name<span class="token operator">:</span> redis
  <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">"14.x.x"</span>
  <span class="token literal-property property">repository</span><span class="token operator">:</span> <span class="token string">"https://charts.bitnami.com/bitnami"</span>
  <span class="token literal-property property">condition</span><span class="token operator">:</span> redis<span class="token punctuation">.</span>enabled</code></pre><div class="notion-text notion-block-48903da852ff4654bebcb266ac18a56d">由于 <code class="notion-inline-code">bkuserapi</code> 和 <code class="notion-inline-code">bkusersaas</code> 都有类似的架构，所以重复为二者创建 Helm Chart 一定不是明智的选择。</div><div class="notion-text notion-block-389b779cb9d24de79409e2838cde401a">我们针对这种 <code class="notion-inline-code">web</code> 类型的应用<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/TencentBlueKing/bk-user/tree/master/deploy/helm/chartty">多封装了一层</a>，能够一定程度上减少重复劳动。</div><div class="notion-text notion-block-5deb5080863d43b8adb1bbcdc9adf9f1">可以通过自定义的 <code class="notion-inline-code">processes</code> 变量完成对于 workload 的定义和封装：</div><pre class="notion-code language-yaml"><code class="language-yaml"># 定义应用内的多个进程
<span class="token literal-property property">processes</span><span class="token operator">:</span>
  <span class="token literal-property property">web</span><span class="token operator">:</span>
    <span class="token literal-property property">ingress</span><span class="token operator">:</span>
      <span class="token literal-property property">enabled</span><span class="token operator">:</span> <span class="token boolean">true</span>
      <span class="token literal-property property">host</span><span class="token operator">:</span> <span class="token string">"bkuser-api.{{ .Values.global.sharedDomain }}"</span>
      <span class="token literal-property property">paths</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"/"</span><span class="token punctuation">]</span>
    <span class="token literal-property property">replicas</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token literal-property property">resources</span><span class="token operator">:</span>
      <span class="token literal-property property">limits</span><span class="token operator">:</span>
        <span class="token literal-property property">cpu</span><span class="token operator">:</span> 1024m
        <span class="token literal-property property">memory</span><span class="token operator">:</span> 1024Mi
      <span class="token literal-property property">requests</span><span class="token operator">:</span>
        <span class="token literal-property property">cpu</span><span class="token operator">:</span> 200m
        <span class="token literal-property property">memory</span><span class="token operator">:</span> 128Mi
    <span class="token literal-property property">readinessProbe</span><span class="token operator">:</span>
      <span class="token literal-property property">tcpSocket</span><span class="token operator">:</span>
        <span class="token literal-property property">port</span><span class="token operator">:</span> <span class="token number">8000</span>
      <span class="token literal-property property">initialDelaySeconds</span><span class="token operator">:</span> <span class="token number">5</span>
      <span class="token literal-property property">periodSeconds</span><span class="token operator">:</span> <span class="token number">30</span>
    <span class="token literal-property property">livenessProbe</span><span class="token operator">:</span>
      <span class="token literal-property property">httpGet</span><span class="token operator">:</span>
        <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token operator">/</span>ping
        <span class="token literal-property property">port</span><span class="token operator">:</span> http
      <span class="token literal-property property">initialDelaySeconds</span><span class="token operator">:</span> <span class="token number">5</span>
      <span class="token literal-property property">periodSeconds</span><span class="token operator">:</span> <span class="token number">30</span>
  <span class="token literal-property property">celery</span><span class="token operator">:</span>
    <span class="token literal-property property">replicas</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token literal-property property">command</span><span class="token operator">:</span>
      <span class="token operator">-</span> bash
    <span class="token literal-property property">args</span><span class="token operator">:</span>
      <span class="token operator">-</span> <span class="token operator">/</span>app<span class="token operator">/</span>start_celery<span class="token punctuation">.</span>sh
  <span class="token literal-property property">beat</span><span class="token operator">:</span>
    <span class="token literal-property property">replicas</span><span class="token operator">:</span> <span class="token number">1</span>
    <span class="token literal-property property">command</span><span class="token operator">:</span>
      <span class="token operator">-</span> bash
    <span class="token literal-property property">args</span><span class="token operator">:</span>
      <span class="token operator">-</span> <span class="token operator">/</span>app<span class="token operator">/</span>start_beat<span class="token punctuation">.</span>sh</code></pre><div class="notion-text notion-block-bd9828d26e8646299268870c66857d6f">具体内容可以参考 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/TencentBlueKing/bk-user">TencentBlueking/bk-user</a> 的<a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/TencentBlueKing/bk-user/tree/master/deploy">部署配置</a>，结合 <a target="_blank" rel="noopener noreferrer" class="notion-link" href="https://github.com/TencentBlueKing/bk-user/blob/master/Makefile"><code class="notion-inline-code">Makefile</code></a> 可以实现一件部署\卸载，一定程度上缓解了 Helm 设计弊病带来的不便。</div><div class="notion-blank notion-block-f17074b08ac04df2b7195042e95bfde2"> </div></main>]]></content>
    </entry>
</feed>